/**
* \file    Rs422_dataTypes.h
* \brief   Модуль RS-422. Внутренние типы данных.
*
* \version 1.0.1
* \date    20-07-2016
* \author  Кругликов В.П.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef RS422_DATATYPES_H
#define RS422_DATATYPES_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************

//*****************************************************************************
#define MAX_ALARM_COUNT 25    ///< Максимально возможное количество алармов.
#define MAX_STATUS_DATA 9     ///< Максимальная длина блока данных статуса.
#define MAX_STATUS_TELE 15    ///< Максимальная длина телеграммы статуса.

//*****************************************************************************
/// \brief Длина массива передаваемых данных с HDLC-кодированием (максимально возможная длина телеграммы).
///
#define N_ARRAY_OUT_RS422 30 

//*****************************************************************************       
#define MAX_ORDER_DATA   10    ///< Максимальная длина блока данных приказа.
#define MAX_ORDER_TELE   15    ///< Максимальная длина телеграммы приказа.
#define MIN_ORDER_TELE   5     ///< Минимальная длина телеграммы приказа.
#define V_ARRAY_IN_RS422 4     ///< Количество массивов для приема данных (максимальное количество принятых за 1 мс).

//*****************************************************************************
// Описание типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Коды критических ошибок счетчиков состояния.
///
typedef enum 
{
    eStepCntError_rs422_run    = 1,    ///< ошибка состояния FSM приема/передачи телеграмм
    
    //*****************************************************************************
    /// \brief ошибка состояния FSM приема и HDLC-декодирование телеграмм по линии связи RS-422
    /// 
    eStepCntError_inRS422_run,
    
    eStepCntError_outRS422_run         ///< ошибка состояния FSM передачи телеграмм по линии связи RS-422
} eRs422StepCntError;

//*****************************************************************************
/// \brief Коды критических ошибок по таймауту.
///
typedef enum 
{
    eSynchroError_start       = 1,    ///< начало
    eSynchroError_firstTele,          ///< в функции #Rs422_run при получении 1-ой телеграммы
    eSynchroError_secondTele,         ///< в функции #Rs422_run при получении 2-ой телеграммы
    eTimeOutError_transmit,           ///< время отправки просрочено
    eSynchroError_finish              ///< окончание
} eRs422TimeOutError;

//*****************************************************************************
/// \brief Идентификаторы состояний автомата обработки принятых телеграмм.
///
typedef enum 
{
    eRs422exec_resetSynchro      = 0,        ///< сброс синхронизации
    eRs422exec_1stTeleReception,             ///< ожидание приема 1-ой телеграммы
    eRs422exec_1stTeleSynchro,               ///< ожидание синхронизации каналов после приема 1-ой телеграммы
    eRs422exec_2stTeleSynchro,               ///< ожидание синхронизации каналов после приема 2-ой телеграммы
    eRs422exec_transmEnd,                    ///< ожидание завершения передачи
    eRs422exec_synchroTransmEnd              ///< ожидание синхронизации окончания передачи телеграмм
} eRs422_execution;

//*****************************************************************************
/// \brief Идентификаторы состояний автомата приема и HDLC-декодирования телеграммы.
///
typedef enum 
{
    eStateInWaitDle    = 0,        ///< ожидание маркера начала телеграммы, 1 байт
    eStateInStx,               ///< прием маркера начала телеграммы, 2 байт
    eStateInData,                ///< прием данных телеграммы
    eStateInPostDle             ///< прием спецсимвола после приема 0х10
} EnumInByte;

//*****************************************************************************
/// \brief Идентификаторы состояний автомата передачи данных.
///
typedef enum 
{
    eStateOutWaitData         = 0,       ///< ожидание данных для передачи 
    eStateOutWaitManageOut,              ///< ожидание времени переключения направления обмена на передачу 
    eStateOutDataTransmit,               ///< передача данных
    eStateOutWaitEndTransmit,            ///< ожидание окончания передачи данных
    eStateOutEnd                         ///< завершение передачи
} EnumOutByte;

//*****************************************************************************
/// \brief Структура данных для приема по линии связи RS-422.
///
typedef struct 
{
    uint8_t aInRS422[V_ARRAY_IN_RS422][MAX_ORDER_TELE];        ///< Массивы для приема данных.
    uint8_t aLength[V_ARRAY_IN_RS422];                         ///< Длина принятых телеграмм.

    /// \brief Счетчики времени от начала приема текущей телеграммы в единицах 31,25 мкс.
    ///
    uint16_t acTimeIn[V_ARRAY_IN_RS422];
    uint8_t indWriteArray;                   ///< Текущий индекс принимаемого массива.
    uint8_t indReadArray;                    ///< Текущий индекс массива для считывания.
    uint8_t indDate;                         ///< Текущий индекс в массиве.

    /// \brief Состояние автомата приема и HDLC-декодирования телеграммы.
    ///
    EnumInByte state;

    bool( *inByte )( uint8_t *date );        ///< Указатель на функцию (прием байта по линии связи).
} InRS422;

//*****************************************************************************
/// \brief Структура данных для передачи по линии связи RS-422.
///
typedef struct 
{
    uint8_t     aOutRS422[N_ARRAY_OUT_RS422];        ///< Массив для передачи данных.
    uint8_t     length;                              ///< Длина передаваемых данных.
    uint8_t     indDate;                             ///< Текущий индекс в массиве.
    uint16_t    timeOut;                             ///< Счетчик времени до запуска передачи телеграммы.
    EnumOutByte state;                               ///< Состояние автомата передачи телеграммы. 
    bool( *outByte )( uint8_t date );                ///< Указатель на функцию (передача байта по линии связи).
    void( *manageInOut )( bool dir );                ///< Указатель на функцию (управление направлением обмена).
    bool( *transmCompl )( void );                    ///< Указатель на функцию (определение окончания обмена).
} OutRS422;

//*****************************************************************************
/// \brief Коды ошибок обмена.
///
typedef enum 
{
    errorRS422_noError                   = 0,        ///< ошибки нет
    errorRS422_shortTeleDoesNotCorrect,              ///< полученная короткая телеграмма некорректна
    errorRS422_tele1DoesNotCorrect,                  ///< полученная 1-я телеграмма некорректна
    errorRS422_tele2DoesNotCorrect,                  ///< полученная 2-я телеграмма некорректна
    errorRS422_teleMutuallyDoNotCorrect,             ///< полученные 1-я и 2-я телеграмма взаимно некорректны
} eRs422_error;

//*****************************************************************************
/// \brief Структура данных RS-422 линии.
///
typedef struct CommunicationRS422_Tag 
{
    uint8_t          numLine;                           ///< Номер линии.
    eRs422_execution state;                             ///< Состояние автомата обработки принятых телеграмм.  
    uint8_t          aInTele[2][MAX_ORDER_TELE];        ///< Массивы для принятых телеграмм.
    uint8_t          lengthInTele;                      ///< Длина последней принятой телеграммы.
    uint8_t          eICId_Rs422Sync;                   ///< Номер синхронизированной переменной.
    bool             exchangeEvent;                     ///< Событие обмена.
    bool             newOrderEvent;                     ///< Признак нового корректного приказа.
    eRs422_error     exchangeError;                     ///< Код ошибки.
    InRS422          inRS422;                           ///< Данные по приему телеграмм. 
    OutRS422         outRS422;                          ///< Данные по передаче телеграмм.
    uint16_t         noExchangeCnt;                     ///< Счетчик таймаута отсутствия обмена.
    uint16_t         noExchangeCtrlSystemCnt;           ///< Счетчик таймаута отсутствия обмена c УС.

    /// \brief Указатель на функцию инициализации портов управления Rx/Tx для \a UART.
    ///
    void( *iniPortCtrl )( void );

    void( *iniUart)( void );        ///< Инициализация регистров \a UART.
    uint8_t timeOut;                ///< Переменная таймаута.
} CommunicationRS422;

//*****************************************************************************
/// \brief Структура состояния модуля.
///
typedef struct 
{
    bool     ctrl;                            ///< Включение / отключение модуля.
    bool     isLineConnect;                   ///< Отсутствие связи с УС.
    uint8_t  numberCycleOK;                   ///< Количество циклов обмена.
    uint8_t  alarm[MAX_ALARM_COUNT];          ///< Массив кодов алармов для телеграмм статуса.
    uint8_t  numAlarm;                        ///< Количество алармов.
    uint8_t  order[MAX_ORDER_DATA];           ///< Принятый приказ.
    uint8_t  orderLength;                     ///< Длина приказа.
    uint8_t  status[MAX_STATUS_DATA];         ///< Статус прибора.
    uint8_t  statusLength;                    ///< Длина статуса.
    uint16_t address;                         ///< Адрес прибора. 
    uint16_t noExchangeTime;                  ///< Tаймаут отсутствия обмена.
    uint16_t noExchangeTimeCtrlSystem;        ///< Tаймаут отсутствия обмена c УС.
} StateRS422;

#endif

//*****************************************************************************
/**
* История изменений: 
* 
* Версия 1.0.1
* Дата   20-07-2016
* Автор  Кругликов В.П.
* 
* Изменения:
*     Базовая версия.
*/
