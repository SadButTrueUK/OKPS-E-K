/**
* \file    ActivityManager_dataTypes.h
* \brief   Типы данных для модуля управления активностью прибора.
*
* \version 1.0.1
* \date    18-05-2017
* \author  Кругликов В.П.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef ACTIVITYMANAGER_DATATYPES_H
#define ACTIVITYMANAGER_DATATYPES_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdbool.h>
#include <stdint.h>

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************

//*****************************************************************************
/// \brief Таймаут включения для основного прибора, мс.
///
#define T_O_START_MASTER            3000U

//*****************************************************************************
#define T_O_START_STANDBY           5000U      ///< Таймаут включения для резервного прибора, мс.

//*****************************************************************************
//#define ENABLE_UNIFORM_LOAD_TIMER   ///< Разрешение работы таймера равномерной нагрузки

#ifdef ENABLE_UNIFORM_LOAD_TIMER
    #define UNIFORM_LOAD                24U                                          ///< Время равномерной нагрузки, ч.
    #define T_O_UNIFORM_LOAD          ( UNIFORM_LOAD * 60UL * 60UL * 1000UL )        ///< Таймаут равномерной нагрузки, мс.
#endif

//*****************************************************************************
/// \brief Таймаут включения реле РПВ, мс.
/// 
#define T_O_RELAY_OPERATE           120U //100U

//*****************************************************************************
/// \brief Таймаут отключения реле РПВ, мс.
/// 
#define T_O_RELAY_RELEASE           110U //90U

//*****************************************************************************
/// \brief Таймаут, в течение которого прибор остается пассивным после передачи активности, мс.
///
#define T_O_REMAIN_PASSIVE          200U

//*****************************************************************************
#define T_O_CHANGE_ACTIVITY_IN_SAFE 100U                                       ///< Таймаут смены активности в БС, мс.

//*****************************************************************************
//  Определение типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Структура входных данных прибора.
///
typedef struct 
{
    uint16_t ownState              :1;        ///< Состояние своего прибора: работоспособное (1) /  безопасное (0).
    uint16_t ownActiveCommand      :1;        ///< Наличие активной команды своего прибора: есть (1) / нет (0).
    uint16_t reserved 			   :1;        ///< Запрос на получение активности: есть (1) / нет (0).
    uint16_t relayRPVcontactsState :1;        ///< Состояние контактов РПВ: на себя (1) / от себя (0).
    uint16_t neighborConnection    :1;        ///< Наличие связи с соседним прибором: есть (1) / нет (0).
    uint16_t neighborHearsMe       :1;        ///< Соседний прибор меня "слышит": да (1) / нет (0).
    uint16_t neighborState         :1;        ///< Состояние соседнего прибора: работоспособное (1) / безопасное (0).
    uint16_t neighborActivity      :1;        ///< Состояние активности соседа: активное (1) / пассивное (0).
    uint16_t neighborIsInWork      :1;        ///< Состояние инициализации менеджера активности соседа (0 - инициализация в процессе, 1 - окончена)
    uint16_t unused                :7;        ///< Неиспользуемые.
} ActivityManager_InputDataStr;

//*****************************************************************************
/// \brief Объединение данных структуры #ActivityManager_InputDataStr с \a uint16_t.
///
typedef union 
{
    ActivityManager_InputDataStr str;         ///< Структура входных данных прибора.
    uint16_t                     data;        ///< Входные данные прибора.
} uActivityManager_InputDataStr;

//*****************************************************************************
/// \brief Структура состояния связи по интерфейсу RS-422.
///
typedef struct 
{
    /// \brief Наличие связи своего прибора по линии 1: есть связь (1) / нет связи (0).
    /// 
    uint8_t ownLine1connect                :1;
    
    /// \brief Наличие связи своего прибора по линии 2: есть связь (1) / нет связи (0).
    /// 
    uint8_t ownLine2connect                :1;
    
    /// \brief Наличие связи своего прибора с УС по линии 1: есть связь (1) / нет связи (0).
    /// 
    uint8_t ownLine1CtrlSystemConnect      :1;
    
    /// \brief Наличие связи своего прибора с УС по линии 2: есть связь (1) / нет связи (0).
    /// 
    uint8_t ownLine2CtrlSystemConnect      :1;
    
    /// \brief Наличие связи соседнего прибора по линии 1: есть связь (1) / нет связи (0).
    /// 
    uint8_t neighborLine1connect           :1;
    
    /// \brief Наличие связи соседнего прибора по линии 2: есть связь (1) / нет связи (0).
    /// 
    uint8_t neighborLine2connect           :1;
    
    /// \brief Наличие связи соседнего прибора с УС по линии 1: есть связь (1) / нет связи (0).
    /// 
    uint8_t neighborLine1CtrlSystemConnect :1;
    
    /// \brief Наличие связи соседнего прибора с УС по линии 2: есть связь (1) / нет связи (0).
    /// 
    uint8_t neighborLine2CtrlSystemConnect :1;
} ActivityManager_Rs422;

//*****************************************************************************
/// \brief Объединение данных структуры #ActivityManager_Rs422 с \a uint8_t.
///
typedef union 
{
    ActivityManager_Rs422 str;          ///< Структура состояния связи по интерфейсу RS-422.
    uint8_t               data;         ///< Данные состояния связи по интерфейсу RS-422.
} uActivityManager_Rs422;

//*****************************************************************************
/// \brief Структура служебных таймаутов.
///
typedef struct 
{
    uint8_t changeSafeActivityCnt;           ///< Счетчик времени смены активности в БС.
    
    /// \brief Флаг состояния счетчика времени смены активности в БС: включен (1) / выключен (0).
    /// 
    uint8_t changeSafeActivityRun :1;
   
    uint8_t unused                :7;        ///< Неиспользуемые.
} ActivityManager_TimeoutStr;

//*****************************************************************************
/// \brief Структура выходных данных прибора.
///
typedef struct 
{
    uint8_t activityState             :1;        ///< Состояние активности прибора: активный (1) / пассивный (0).
    uint8_t relayCtrlCommand          :1;        ///< Состояние управления реле: включен (1) / выключен (0).
    uint8_t requestDisableCtrlActions :1;        ///< Запрос на выключение управляющих воздействий: есть (1) / нет (0).
    uint8_t unused                    :5;        ///< Неиспользуемые.
} ActivityManager_OutputDataStr;

//*****************************************************************************
/// \brief Объединение данных структуры #ActivityManager_OutputDataStr с \a uint8_t.
///
typedef union 
{
    ActivityManager_OutputDataStr str;         ///< Структура выходных данных прибора.
    uint8_t                       data;        ///< Выходные данные прибора.
} uActivityManager_OutputDataStr;

//*****************************************************************************
/// \brief Идентификаторы управления работы функции #ActivityManager_run.
///
typedef enum 
{
    eRunStart               = 0,        ///< включение
    eRunPassiveState,                   ///< пассивное состояние
    eRunTransitionToActive,             ///< переход в активное состояние
    eRunActiveState,                    ///< активное состояние
    eRunTransitionToPassive             ///< переход в пассивное состояние
} ActivityManager_States;

//*****************************************************************************
/// \brief Идентификаторы управления работы функции #transitionToActive.
///
typedef enum 
{
    eTrToActStart            = 0,        ///< включение
    eTrToActRelaySwitchDelay             ///< ожидание переключения реле
} eActivityManager_TrToActive;

//*****************************************************************************
/// \brief Идентификаторы управления работы функции #transitionToPassive.
///
typedef enum 
{
    eTrToPassWaitDisableCtrl = 0,        ///< ожидание отключения управляющих воздействий
    eTrToPassWaitRelaySwitch,            ///< ожидание переключения реле
    eTrToPassRemainInActive              ///< оставаться в активном состоянии
} eActivityManager_TrToPassive;

//*****************************************************************************
/// \brief Структура состояния.
///
struct ActivityManager_DeviceStr_ 
{
    /// \brief Статус прибора: true (основной), false (резервный).
    ///
    bool                           status;
    bool                           changeActivity;   ///< Команда на смену активности от управляющей системы
    bool                           initIsActive;     ///< Признак того, что инициализация завершена (0 - в процессе, 1 - завершена)  
    /// \brief Состояние управления: true (включен), false (выключен).
    ///
    bool                           ctrl;
    bool                           ini;                          ///< Инициализация данных: true (есть), false (нет).
    uActivityManager_InputDataStr  inputData;                    ///< Объединение входных данных.
    uActivityManager_OutputDataStr outputData;                   ///< Объединение выходных данных.
    uActivityManager_Rs422         rs422;                        ///< Объединение состояния связи по RS-422.
    ActivityManager_States         runCnt;                       ///< Счетчик состояния  функции #ActivityManager_run.
    eActivityManager_TrToActive    trToActCnt;                   ///< Счетчик состояния функции #transitionToActive.
    eActivityManager_TrToPassive   trToPassCnt;                  ///< Счетчик состояния функции #transitionToPassive.
#ifdef ENABLE_UNIFORM_LOAD_TIMER   //если разрешён таймер равномерной нагрузки   
    uint32_t                       uniformLoadTimeCnt;           ///< Счетчик времени равномерной нагрузки.
#endif
    uint16_t                       transitionTimeCnt;            ///< Счетчик времени переходного состояния.
    uint8_t                        transitionFromSafeCnt;        ///< Счетчик времени перехода из БС в РС.
    ActivityManager_TimeoutStr     timeout;                      ///< Структура служебных таймаутов.
};

#endif

//*****************************************************************************
/**
* История изменений: 
* 
* Версия 1.0.1
* Дата   18-05-2017
* Автор  Кругликов В.П.
* 
* Изменения:
*     Базовая версия.
*/
