/**
* \file    Main.h
* \brief   Главный модуль проекта ОКПС-Е-К 
* \details Интерфейс
* 
* \version 1.0.2
* \date    01-11-2019
* \author  Кругликов В.П.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef MAIN_H
#define MAIN_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "Rs422.h"
#include "Indication.h"
#include "BlockExch.h"
#include "ActivityManager.h"
#include "ActivityManager_connect.h"

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************

//*****************************************************************************
#define TIME_INIT_ADDRESS               1000         ///< Время задержки включения индикации ошибки определения.

//*****************************************************************************
/// \brief Максимальное допустимое время отсутствия связи по интерфейсу RS-422, мс.
///
#define RS422_LINE_TIMEOUT              2000

//*****************************************************************************
/// \brief Максимальное допустимое время отсутствия связи c УС по интерфейсу RS-422, мс.
///
#define RS422_SYSTEM_TIMEOUT            1500 

//*****************************************************************************        
#define RS422_ORDER_DATA_LENGTH         3            ///< Длина приказа, байт.
#define BLOCK_EXCHANGE_SIZE             1            ///< Длина данных для передачи соседнему прибору, байт.

//*****************************************************************************
/// \brief Максимальное допустимое время отсутствия связи с соседнем прибором, мс.
///
#define BLOCK_EXCHANGE_TIMEOUT          60

//*****************************************************************************
/// \brief Время включенного состояния индикатора при ошибке определения адреса, мс.
///
#define LED_INCORRECT_ADDRESS_BLINK_ON  500    

//*****************************************************************************     
/// \brief Время включенного состояния индикатора при ошибке определения адреса, мс.
///
#define LED_INCORRECT_ADDRESS_BLINK_OFF 500          

//*****************************************************************************
#define ADDRESS_CAN_CHANNEL_MASTER      0x2AA        ///< Адрес абонента \a CAN МКО (Master).
#define ADDRESS_CAN_CHANNEL_SLAVE       0x2AB        ///< Адрес абонента \a CAN МКО (Slave).

//*****************************************************************************
/// \brief Период работы главного цикла, мкс.
///
#define PERIOD_MAIN_CYCLE        1000

//*****************************************************************************
// Объявление глобальных переменных
//*****************************************************************************

//*****************************************************************************
extern Rs422_handler             *rs422;                  // Указатель на переменную состояния модуля Rs422.h.
extern BlockExch_Str             *blockExchange;          // Указатель на переменную состояния модуля BlockExch.h.
extern ActivityManager_DeviceStr *activityManager;        // Указатель на переменную состояния модуля ActivityManager.h.
extern indOutput_type            ledRs1,                  // Индикатор RS1.
                                 ledRs2,                  // Индикатор RS2.
                                 ledPlusPos,              // Индикатор "Положение плюс".
                                 ledMinusPos,             // Индикатор "Положение минус".
                                 ledLossCtrl;             // Индикатор "Потеря контроля".

extern volatile uint16_t cInterrMainFor;           ///< Счетчик прерываний синхронизации.
extern volatile uint16_t cErrorCheckPhase;         ///< Счетчик отказов по уровню временной синхронизации.
extern uint16_t regDSWPAG;                         ///< Состояние регистра \a DSWPAG.
extern uint16_t regDSRPAG;                         ///< Состояние регистра \a DSRPAG.
extern const uint16_t MAIN_NUMBER_OF_INTERRUPT;	   ///< Количество прерываний синхронизации, которые отводятся на одну итерацию главного цикла

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Получить время работы, с.
/// \return Время работы, 0 - 0x8000 (~9 часов).
/// \note Более 0x8000 время не считается.
///
uint16_t Main_getTimeWorkSec( void );

//*****************************************************************************
/// \brief Получить время работы внутри секунды, мс.
/// \return Время работы, 0 - 999.
///
uint16_t Main_getTimeWorkMs( void );

//*****************************************************************************
/// \brief Получить количество выполненных прерываний (период 62,5 мкс) из основного цикла.
/// \return Число от 0 до 16.
///
uint16_t Main_getTimeWorkInterrupt( void );


//*****************************************************************************
/// \brief Получить длительность основного цикла, мкс.
/// \return Длительность основного цикла.
///
uint16_t Main_getPeriodCycle();


//*****************************************************************************
/// \brief Получить текущее время работы главного цикла, мкс.
/// \return Текущее время работы главного цикла.
///
uint16_t Main_getCurrentTimeCycle();


//*****************************************************************************
/// \brief Управление главным потоком.
/// \note Функция запускает на выполнение все компоненты ПО.
/// \note Период запуска компонент синхронизируется с функциями обработки 
/// прерываний синхронизации с соседним МК.
int main( void );

#endif

//*****************************************************************************
/**
* История изменений:
*
* Версия 1.0.1
* Дата   22-03-2016
* Автор  Третьяков В.Ж.
*
* Изменения:
*   Базовая версия.
*   Main.c->1) MainRegisters.h     Осциллятор: M = 32
*               2) ConfigurationMK.h:  POSCMD = HS  
*   ConfigMK - порт RG6
*   TimeSynchronizationPorts_h  RE14, RE15 - совпадает
*   ECAN_ACK пины дискретов RD14, RD15 - совпадает
*   ECAN1 - TX RD6 RP70, RX RD5 RP69 
*   EEPROM SPI - RC4 RC5 - совпадает
*   InnerLEDPorts_h - RC9
*   ADC - не настраивал
* 
* Версия 1.0.2
* Дата   01-11-2019
* Автор  Кругликов В.П.
* 
* Изменения:
*    Увеличена длина приказа до 3 байт в соответствии с протоколом 41 версии
*/
