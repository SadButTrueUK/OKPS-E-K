/**
* \file    InterChannel.h
* \brief   Межканальный обмен
* \details Интерфейс
* \details Модуль межканального обмена предназначен для обеспечения синхронизации 
* и передачи данных между своим и соседним каналами.
*
* \version 1.0.6
* \date    13-09-2019
* \author  Годунок А.Н.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef interchannel_h
#define interchannel_h

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "drv\iodrv.h"
#include "ProtectionState_codes.h"
#include "interChannelId.h"

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
typedef uint16_t param_t ;         ///< Тип данных, который определяет формат параметров, синхронизируемых через МКО.
typedef InterChannelId id_t ;      ///< Тип идентификатора параметра.

//*****************************************************************************
/// \brief Сценарий синхронизации.
/// \details Перечень действий, которые МКО выполняет 
/// над параметрами.
///
typedef enum {
      
    /// \brief сценарий не определен 
    /// \note Такое значение приведет к отказу при синхронизации.
    ///
    eScriptNil = 0,          
                              
    eScriptSync,             ///< синхронизация параметра 
    eScriptTransmit,         ///< передача параметра
    eScriptLocal,            ///< опубликовать параметр без отправки в соседний канал
    
    /// \brief передача параметра без контроля и синхронизации
    /// \note При использовании этого сценария метод 
    /// #InterChannel_isSynchronized никогда не вернет true.
    /// Для избежания ошибки повторной синхронизации 
    /// необходимо использовать признак 
    /// #InterChannel_isHandling.
    ///
    eScriptDebug,            
    
    eScriptChVal,            ///< синхронизация по изменению значения
    eScriptCount             ///< количество сценариев синхронизации
} InterChannelScript ;

//*****************************************************************************
/// \brief Процедуры синхронизации данных.
///
typedef enum {
        
      eProcSyncNil = 0,           ///< не выполняется никаких действий с параметром
        
      /// \brief нет синхронизации
      /// \note В качестве синхронизируемых данных возвращается значение своего канала.
      ///
      eProcSyncOff,

      eProcSyncHi,                ///< выбор большего значения
      eProcSyncLo,                ///< выбор меньшего значения
      eProcSyncAverage,           ///< выбор арифметического среднего значения
      eProcSyncAND,               ///< выбор по «AND»
      eProcSyncOR,                ///< выбор по «OR»
      eProcSyncEqual              ///< процедура синхронизации (обновление данных если они совпадают)
} InterChannelProcSync;

//*****************************************************************************
/// \brief Процедуры контроля данных.
///
typedef enum {
      eProcCheckNil = 0,          ///< не выполняется никаких действий с параметром
      eProcCheckOff,              ///< нет контроля (применяется при регулировке аппаратуры или передаче параметра)
      eProcCheckEqual,            ///< процедура контроля данных (абсолютное совпадение данных)
      eProcCheckMask,             ///< совпадение данных по маске
      eProcCheckDeltaX,           ///< абсолютная разность находится в пределах «deltaХ» (значение)
      eProcCheckDeltaP            ///< абсолютная разность находится в пределах «deltaP» (процент)
}InterChannelProcCheck;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация переменных компонента.
/// \param drvPtr – указатель на структуру данных драйвера.
/// \note Вызывается перед началом работы с компонентом 
/// "МКО". Инициализируются все данные для корректной 
/// работы компонента. 
/// \note Вызов этой функции перед использованием других функций этого 
/// компонента обязателен.
///
void InterChannel_ctor( const ArrayIoDriver *drvPtr );

//*****************************************************************************
/// \brief Настройка сценариев синхронизации параметра.
/// \param id – идентификатор настраиваемого параметра;
/// \param script – сценарий синхронизации параметра #InterChannelScript;
/// \param procSync – процедура синхронизации данных параметра #InterChannelProcSync;
/// \param procCheck – процедура контроля данных параметра #InterChannelProcCheck;
/// \param paramCheck – значение используемое процедурой контроля параметра;
/// \param middleRangeCheck – значение половины измерительного диапазона 
/// контролируемого параметра;
/// \param time1 – время получения параметра от обоих каналов (Т1), мс;
/// \param time2 – время формирования синхронизированного параметра (Т2), мс;
/// \param time3 – период поступления запросов на синхронизацию (Т3), мс.
/// \note Данная функция должна быть вызвана для каждого параметра, запросы на 
/// синхронизацию которого будут поступать в систему МКО в 
/// процессе работы. 
/// \note Запрос синхронизации ненастроенного параметра приведет 
/// к переходу в ЗС с кодом #ePS_IntChScript.
/// \note Времена Т1, Т2, Т3 имеют размерность 1 мс, при условии вызова функции #InterChannel_run с периодом 1 мс.
/// \note Если значение идентификатора настраиваемого параметра не соответствует ни одному 
/// из множества #InterChannelId, указанного в файле interChannelId.h, произойдет переход
/// в ЗС с кодом #ePS_IntChIdError.
/// \note Если значение идентификатора сценария синхронизации не соответствует ни одному 
/// из множества #InterChannelScript или не задано,  произойдет переход
/// в ЗС с кодом #ePS_IntChScript.
/// \note Если используется процедуре синхронизации #eProcSyncEqual без процедуры контроля 
/// #eProcCheckEqual, произойдет переход в ЗС с кодом #ePS_IntChProcCheck.
/// \note Если используется сценарий синхронизации #eScriptSync, время time1 обязательно 
/// должно быть задано (быть больше нуля). Для остальных сценариев - должно быть равно нулю.
/// При невыполнении этих условий, произойдет переход в ЗС с кодом #ePS_IntChT1ValueError.
///
void InterChannel_setParamSettings( id_t id, 
                               InterChannelScript    script, 
                               InterChannelProcSync  procSync, 
                               InterChannelProcCheck procCheck,
                               param_t               paramCheck,                // Параметр контроля
                               // Значение половины измерительного диапазона контролируемого параметра
                               param_t               middleRangeCheck,
                               uint16_t              time1,                     // Время Т1
                               uint16_t              time2,                     // Время Т2
                               uint16_t              time3                      // Время Т3
                                    );

//*****************************************************************************
/// \brief Запрос синхронизации параметра.
/// \param id – идентификатор синхронизируемого параметра;
/// \param data – значение синхронизируемого параметра.
/// \note Функция помещает значение синхронизируемого параметра в очередь для 
/// передачи соседнему каналу. При этом сбрасывает признак выполнения синхронизации
/// параметра #InterChannel_isSynchronized.
/// \note При неправильном идентификаторе настраиваемого параметра произойдет переход
/// в ЗС с кодом #ePS_IntChIdError.
/// \note При запросе синхронизации параметра, для которого не вызывалась функция 
/// #InterChannel_setParamSettings, произойдет переход в ЗС
/// с кодом #ePS_IntChScript.
/// \note При повторном запросе синхронизации параметра, до завершения предыдущего 
/// запроса этого же параметра, произойдет переход в ЗС с кодом 
/// #ePS_IntChRepeat.
///
void InterChannel_synchronize( id_t id, param_t data );

//*****************************************************************************
/// \brief Признак завершения синхронизации параметра.
/// \param id – идентификатор синхронизируемого параметра.
/// \retval TRUE – синхронизация параметра выполнена;
/// \retval FALSE – синхронизация параметра не окончена.
/// \note Данная функция сообщает о том, что синхронизация параметра выполнена
/// и засинхронизированные данные можно использовать в дальнейших алгоритмах. После инициализации параметра, при помощи 
/// #InterChannel_setParamSettings, данная функция возвращает false. 
/// Поскольку данные, синхронизация которых выполнена, отсутствуют.
/// \note Для избежания повторного запроса синхронизации рекомендуется 
/// использовать #InterChannel_isHandling.
/// \note При неправильном идентификаторе настраиваемого параметра 
/// произойдет переход в ЗС с кодом #ePS_IntChIdError.
///
bool InterChannel_isSynchronized( id_t id );

//*****************************************************************************
/// \brief Событие синхронизации.
/// \details Функция сообщает о том, что между текущим и предыдущим ее вызовом
/// была выполнена синхронизация параметра.
/// \note При вызове этой функции событие сбрасывается.
/// \note Если между вызовами произошло несколько событий, будет установлен признак 
/// переполнения событий, который можно прочитать при помощи функции 
/// #InterChannel_syncEventOverflow.
/// \param id – идентификатор синхронизируемого параметра.
/// \retval true – с момента предыдущего вызова функции, была выполнена 
/// синхронизация параметра;
/// \retval false – с момента предыдущего вызова функции, синхронизация 
/// параметра не выполнялась.
///
bool InterChannel_syncEvent( id_t id );

//*****************************************************************************
/// \brief Признак переполнения событий синхронизации.
/// \details Функция сообщает о том, что с момента последнего чтения события 
/// синхронизации #InterChannel_syncEvent, произошло больше одного события.
/// \note При вызове этой функции признак сбрасывается.
/// \note В данном случае не реализован переход в защитное состояние, поскольку 
/// пользователь может не пользоваться событиями синхронизации и тогда 
/// признак их переполнение будет сформирован при первом же переполнении и 
/// не будет сброшен до следующей инициализации компонента МКО.
/// \param id – идентификатор синхронизируемого параметра.
/// \retval true – произошло переполнение событий синхронизации;
/// \retval false – переполнения событий синхронизации не происходило.
///
bool InterChannel_syncEventOverflow( id_t id );

//*****************************************************************************
/// \brief Признак процесса выполнения синхронизации параметра.
/// \param id – идентификатор синхронизируемого параметра.
/// \retval TRUE – синхронизация параметра в процессе выполнения;
/// \retval FALSE – синхронизация параметра не выполняется.
/// \note Данная функция сообщает выполняется ли синхронизация данного 
/// параметра в данный момент. Если функция #InterChannel_isHandling вернула false, значит можно
/// послать запрос на синхронизацию, даже если 
/// #InterChannel_isSynchronized вернула false. 
/// \note При неправильном идентификаторе настраиваемого параметра произойдет переход
/// в ЗС с кодом #ePS_IntChIdError.
///
bool InterChannel_isHandling( id_t id );

//*****************************************************************************
/// \brief Чтение синхронизированного значения параметра.
/// \param id – идентификатор синхронизируемого параметра.
/// \return Значение синхронизированного параметра 
/// с идентификатором \a id.
/// \note Если функция #InterChannel_isSynchronized возвращает false, то 
/// функция  #InterChannel_getData возвращает значение, которое было при последней синхронизации.
/// \note При неправильном идентификаторе настраиваемого параметра произойдет переход
/// в ЗС с кодом #ePS_IntChIdError.
///
param_t InterChannel_getData( id_t id );

//*****************************************************************************
/// \brief Чтение значения своего канала, которое было отправлено на синхронизацию.
/// \param id – идентификатор синхронизируемого параметра.
/// \return Значение параметра (с идентификатором \a id), которое было отправлено на синхронизацию в
/// последнем запросе.
/// \note При неправильном идентификаторе настраиваемого параметра произойдет переход
/// в ЗС с кодом #ePS_IntChIdError.
///
param_t InterChannel_getLocalData( id_t id );

//*****************************************************************************
/// \brief Синхронизация параметров.
/// \details Основной поток.
/// \note Функция выполняет контроль времен Т1, Т2 и Т3, выполняет обработку 
/// ресурсоемких частей алгоритма, а также вызывается из главного цикла программы с периодом 1 мс.
///
void InterChannel_run( void );

//*****************************************************************************
/// \brief Работа с соседним каналом через линию связи.
/// \details Определяет события готовности данных к чтению или передаче, 
/// выполняет чтение данных из драйвера и инициирует передачу.
/// \param transmitIsEnabled - разрешение передачи данных.
/// Для обеспечения ограничение на передачу данных перед началом нового цикла
/// пользовательское ПО должно сообщить, может ли МКО выдавать данные на шину
/// или нет (true – выдача данных разрешена, false – запрещена).
/// \note Функция должна вызываться из подпрограммы обработки прерываний 
/// синхронизации. Частота вызова в соответствии с частотой этих прерываний.
///
void InterChannel_runCommunication( bool transmitIsEnabled );

//*****************************************************************************
/// \brief Опрос готовноcти драйвера.
/// \note Функция вынесена из #InterChannel_runCommunication для того, чтобы 
/// позволить производить опрос готовности максимально синхронно 
/// и не блокировать опрос готовностей из #InterChannel_run.
///
void InterChannel_runDrv( void );

//*****************************************************************************
// Эта часть зависит от реализации протокола
//*****************************************************************************

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Идентификаторы позиции данных в физическом протоколе CAN.
/// \note В протоколе передается два параметра. Данные идентификаторы используются 
/// функциями #InterChannel_getCommunicationData и 
/// #InterChannel_setCommunicationData 
/// для того, чтобы правильно преобразовать параметры в данные протокола и 
/// наоборот.
///
typedef enum {
    
    /// \brief первый параметр передается вместе с идентификатором, идентификатор может быть любым
    ///
    eInterChannelCommPos0 = 0,
    
    /// \brief второй параметр передается вместе с идентификатором, идентификатор может быть любым
    ///
    eInterChannelCommPos1,
    
} InterChannelCommPos;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Установка значения параметра в физическом протоколе передачи данных.
/// \param buf – указатель на данные низкоуровневого протокола, в который записывается 
/// значение и идентификатор нужного параметра;
/// \param size – размер буфера;
/// \param commPos – позиция в низкоуровневом протоколе
/// #InterChannelCommPos;
/// \param id – идентификатор параметра;
/// \param data – значение параметра.
///
void InterChannel_setCommunicationData( uint8_t  *buf, int size, int commPos, id_t id, param_t data  );

//*****************************************************************************
/// \brief Получает значение параметра в физическом протоколе.
/// \param buf – указатель на данные низкоуровневого протокола, из которых будут извлечены
/// значение и идентификатор нужного параметра;
/// \param size – размер буфера;
/// \param commPos – позиция в низкоуровневом протоколе
/// #InterChannelCommPos;
/// \param id – указатель на извлеченный идентификатор параметра;
/// \param data – указатель на извлеченное значение параметра.
///
void InterChannel_getCommunicationData( uint8_t  *buf, int size, int commPos, id_t *id, param_t *data  );

#endif

//*****************************************************************************
/**
* История изменений: 
* 
* Версия 1.0.1
* Дата   22-01-2016
* Автор  Годунок А.Н. 
* 
* Изменения:
*     Базовая версия.
* 
* Версия 1.0.2
* Дата   22-02-2016
* Автор  Годунок А.Н. 
* 
* Изменения:
*     Добавлен новый сценарий синхронизаций – *      "синхронизация по изменению значения".
* 
* Версия 1.0.3
* Дата   22-04-2016
* Автор  Годунок А.Н. 
* 
* Изменения:
*     Добавлен метод #InterChannel_getLocalData.
*
* Версия 1.0.4
* Дата   23-05-2019
* Автор  Годунок А.Н. 
*
* Изменения:
*    1) Удалено InterChannelTrPhase
*    2) Заменено определение типа id_t с uint8_t InterChannelId, который определяет 
* идентификаторы параметров в файле InterChannelId.h.
*    3) Из-за изменений в структуре драйверов ArrayIoDriver изменен прототип функции 
*    InterChannel_runCommunication( const ArrayIoDriver *drv ) на InterChannel_runCommunication( ),
*    поскольку теперь таблица функций и данные объединены в одной структуре.
*    Тек же изменен прототип функции void InterChannel_ctor( const void *drvPtr ) на 
*    void InterChannel_ctor( const ArrayIoDriver *drvPtr ).
*
* Версия 1.0.5
* Дата   08-07-2019
* Автор  Годунок А.Н. 
*
* Изменения:
*    1) Изменен прототип функции InterChannel_runCommunication. Теперь эта функция принимает
* параметр transmitIsEnabled, который разрешает или запрещает выдачу данных на шину CAN.
* подробней смотри изменения в модуле InterChannel.с версия 1.0.11.
* 
* Версия 1.0.6
* Дата   13-09-2019
* Автор  Годунок А.Н.
*
* Проблема: 
*    1) При выполнении сценария eScriptTransmit принимающая сторона не могла
*    определить, что пришли новые данные. Функция InterChannel_getData всегда 
*    возвращает последнее синхронизированное значение, если передаются параметры, 
*    имеющие одинаковое значение, их нельзя различить. Функция 
*    InterChannel_isSynchronized сбрасывается при поступлении нового запроса 
*    от своего или от соседнего канала. Поскольку принимающая сторона не шлет 
*    данных, а при приеме флаг сбрасывается буквально до следующего цикла главного 
*    потока, после чего снова взводится, у нее нет возможности определить, когда 
*    пришли новые данные.
*
* Изменения:
*    1) Чтобы не нарушать существующую логику для устранения данной проблемы в 
*    МКО вводятся две функции InterChannel_syncEvent и 
*    InterChannel_syncEventOverflow - событие синхронизации и признак 
*    переполнения события синхронизации. Событие синхронизации устанавливается 
*    одновременно с признаком окончания синхронизации, но сбрасывается при вызове 
*    этой функции. Таким образом, пользовательское ПО может опрашивать это событие,
*     а когда оно наступило вычитывать данные при помощи InterChannel_getData. 
*    Признак переполнения события синхронизации введен для того, что бы можно было 
*    проконтролировать, что не было пропущенных данных. Данный признак взведется, 
*    если произойдет несколько событий после последнего обращения пользовательского
*    ПО к функции InterChannel_syncEvent. При чтении данный признак сбрасывается.
*/
