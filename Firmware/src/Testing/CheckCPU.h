/**
* \file    CheckCPU.h
* \brief   Проверка ядра МК.
* 
* \version 1.0.1
* \date    05-07-2016
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef CHECKCPU_H
#define CHECKCPU_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Проверка ядра МК.
/// \note Вызывается с частотой 1 кГц.
/// \note При обнаружении неисправностей происходит переход в состояние ЗС.
/// \retval true  - все в порядке;
/// \retval false - обнаружена неисправность.
///
bool CheckCPU_run( void );

#endif

//*****************************************************************************
/**
* Пояснения:
*    Модуль CheckCPU осуществляет тестирование ALU, регистров W0-W15, регистров цикла  и 
*    стека путем записи и считывания из регистров специального назначения 
*    предопределенных значений. 
*    Флаг Z проверяется на возможность установки его в 0 командой «xor W0, W0, W0». 
*    Проверка флага Z осуществляется командой «bra nz, SFRFail». Если флаг Z  
*    не установился в 0, программа переходит  в состояние ЗС. 
*    Флаг Z проверяется на возможность установки его в 1 командой «dec W0, W0». 
*    Проверка флага Z осуществляется командой «bra z, SFRFail». Если флаг Z  
*    не установился в 1, программа переходит  в ЗС.
*    Флаг C проверяется на возможность установки его в 0 командой «add  W0, W0, W0». 
*    Проверка флага C осуществляется командой «bra nc, SFRFail». Если флаг C  
*    не установился в 0, программа переходит в состояние ЗС. Флаг C 
*    проверяется на возможность установки его в 1 командой «add #0, W0». Проверка флага C 
*    осуществляется командой «bra c, SFRFail». Если флаг C  не установился в 1, 
*    программа переходит в состояние ЗС.
*    Флаг N проверяется на возможность установки его в 0 командой «xor W0, W0, W0». 
*    Проверка флага N осуществляется командой «bra n, SFRFail». Если флаг N  
*    не установился в 0, программа переходит в состояние ЗС.
*    Флаг N проверяется на возможность установки его в 1 командой «dec W0, W0». 
*    Проверка флага N осуществляется командой «bra nn, SFRFail». Если флаг N 
*    не установился в 1, программа переходит  в состояние ЗС.
*    Флаг OV проверяется на возможность установки его в 0 командой «xor W0, W0, W0». 
*    Проверка флага OV осуществляется командой «bra ov, SFRFail». Если флаг OV  не установился в 0, 
*    программа переходит  в состояние ЗС. Флаг OV проверяется на возможность 
*    установки его в 1 командами «mov #0x7FFF, W0», «inc W0, W0». Проверка флага OV 
*    осуществляется командой «bra nov, SFRFail». Если флаг OV  не установился в 1,
*    программа переходит  в состояние ЗС.
*    Для проверки регистра W0 используется только сам регистр W0. 
*    Сначала проверяется младший байт регистра W0. В него заносится эталонное значение и 
*    проверяется на истинность командой «xor #0xA5, W0». (Эта команда содержит код 
*    проверяемой константы в самой команде) Если нет сравнения, программа переходит 
*    в состояние ЗС. Далее используется команда обмен байтами «swap.b  W0» 
*    и снова проверка при помощи команды, «xor #0x5А, W0».  
*    При успешном завершении проверки младшего байта аналогично анализируется старший байт регистра W0. 
*    Регистр W1 проверяется при помощи регистра W0. В  регистр W0 заносится эталонное значение,  
*    затем в регистр W1 заносятся значение из регистра W0 и сравнивается с содержимым  регистра W0 
*    командой «cp W1, W0».
*    Регистр TBLPAG проверяется при помощи регистра W0. В  регистр W0 заносится эталонное значение,  
*    затем в регистр TBLPAG заносятся значение из регистра W0 и сравнивается с содержимым  регистра W0 
*    командой «cp.b TBLPAG». Если нет сравнения, программа переходит  в состояние ЗС. 
*    Регистр PSVPAG проверяется при помощи регистра W0. В регистр W0 заносится эталонное значение,  
*    затем в регистр PSVPAG заносятся значение из регистра W0 и сравнивается с содержимым  регистра W0 
*    командой «cp.b PSVPAG». Если нет сравнения, программа переходит  в ЗС. 
*    Регистр цикла REPEAT проверяются при помощи регистра W0. В  регистр W0 заносится 
*    эталонное значение,  затем в регистр цикла заносятся значение из регистра W0 и сравнивается с 
*    содержимым  регистра W0 командой «cp RCOUNT». Если нет сравнения, программа переходит  
*    в состояние ЗС.
*    Регистры цикла DO проверяются при помощи регистра W0. В  регистр W0 заносится эталонное значение, 
*    затем в регистры цикла заносятся значение из регистра W0 и сравниваются с содержимым  
*    регистра W0 командами «cp DOSTARTL», «cp DOSTARTH». Если нет сравнения, 
*    программа переходит  в состояние ЗС.
*    Регистры W2-W14 проверяются с помощью цикла DO. В регистр W0 заносится эталонное значение, 
*    в регистр W1 – адрес проверяемого регистра. Командой «do #(13-1), 0f» определяется и количество 
*    повторений цикла и последняя метка цикла. В цикле эталонное значение из регистра W0 сравнивается 
*    с содержимым регистра по адресу из регистре W1 командой   «cp  W0, [W1]». В случае неисправности 
*    хотя бы одного из вышеперечисленных регистров модуль переводится в ЗС.
*/

//*****************************************************************************
/**
* История изменений:
* 
* Версия 1.0.1
* Дата   05-07-2016
* Автор  Третьяков В.Ж.
* 
* Изменения:
*    Базовая версия.
*/
