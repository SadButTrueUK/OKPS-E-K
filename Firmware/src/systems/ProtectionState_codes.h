/**
* \file    ProtectionState_codes.h
* \brief   Коды отказов ОКПС-Е-К.
*
* \version 2.0.2
* \date    08-07-2019
* \author  Годунок А.Н., Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef PROTECTIONSTATE_CODES_H
#define PROTECTIONSTATE_CODES_H

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************
#define PROTECTION_CODE_ABSENCE 0xA55A        ///< Код, обозначающий отсутствие ЗС.

//*****************************************************************************
// Определение типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Тип отказа.
///
typedef enum
{
    eGrPS_Main                 = 0x01,    ///< отказы компонента Main.h
    eGrPS_InterChannel         = 0x02,    ///< отказы компонента InterChannel.h
    eGrPS_CanDrv               = 0x03,    ///< отказы драйвера модуля \a CAN
    eGrPS_CanAckDrv            = 0x04,    ///< отказы драйвера модуля \a CAN с подтверждением обмена
    eGrPS_BinIn                = 0x05,    ///< отказы компонента BinIn.h
    eGrPS_AnalogInput          = 0x06,    ///< отказы компонента AnalogInput.h
    eGrPS_AdcDrv               = 0x07,    ///< отказы драйвера модуля АЦП
    eGrPS_Eeprom               = 0x08,    ///< отказы драйвера \a EEPROM
    eGrPS_ControlMK            = 0x09,    ///< отказы компонента проверок МК
    eGrPS_Rs422                = 0x0B,    ///< отказы модуля обмена по интерфейсу RS-422
    eGrPS_BlockExch            = 0x0C,    ///< отказы модуля BlockExch.h
    eGrPS_DeviceAddress        = 0x0D,    ///< отказы модуля DeviceAddress.h
    eGrPS_RelayCtrl            = 0x0E,    ///< отказы модуля RelayCtrl.h
    eGrPS_OverloadDetector     = 0x10,    ///< отказы модуля определения перегрузки по току
    eGrPS_PositionDet          = 0x11,    ///< отказы модуля определения положения
    eGrPS_ShuntShift           = 0x12,    ///< отказы модуля перевода стрелки          
    eGrPS_SafetyPowerControl   = 0x13,    ///< отказы модуля безопасного управления питанием
    eGrPS_IntegrCtrl           = 0x14,    ///< отказы модуля контроля целостности обмоток двигателя
    eGrPS_ControlSupplyVoltage = 0x15     ///< ошибка контроля напряжений питания, опорного, буферного регистра АЦП
} ProtectionStateGroup;

//eGrPS_Main = 0x01 ***********************************************************
/// \brief Идентификаторы отказов компонента Main.h.
///
typedef enum
{
    ePS_MainCheckInterrupt    = 0x01,    ///< ожидаемое прерывание произошло до вызова проверяющей функции
    ePS_MainCheckPhase0       = 0x02,    ///< ошибка сигнала временной синхронизации в фазе 0
    ePS_MainCheckPhase1       = 0x03,    ///< ошибка сигнала временной синхронизации в фазе 1
	
	//*****************************************************************************
	/// \brief за период прерывания таймера не было изменения уровня сигнала от соседнего МК
    ///
    ePS_MainCheckPeriodTimer  = 0x04,

    //*************************************************************************
    /// \brief Возникло неиспользуемое прерывание.
    /// При возникновении неиспользуемого прерывания в параметрах сохраняется адрес инструкции,
    /// при выполнении которой возникло неиспользуемое прерывание. Также сохраняется номер вектора 
    /// прерывания (Interrupt Vector Number) согласно Таблице 6-1 документа "Section 6. Interrupts. (DS70600B).pdf".
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - младшее слово адреса инструкции [15...0];
    ///     - параметр 2 - старшее слово адреса инструкции [23...16];
    ///     - параметр 3 - номер вектора прерывания (Interrupt Vector Number);
    ///     - параметр 4 - 0.
    ///
    ePS_MainUnusedInterrupt   = 0x05,    ///< возникло неиспользуемое прерывание

    ///     - параметр 1 - регистр RCON;
    ePS_MainIncorrectReset    = 0x08,    ///< некорректная причина сброса МК

    ePS_MainErrorBeginSynchro = 0x09,    ///< нет синхронизации МК по началу работы 
    ePS_MainErrorConfigCPU    = 0x0A,    ///< Ошибка при определении конфигурации (Master/Slave) процессора
    ePS_MainCheckMaxInterrupt = 0x0C     ///< количество прерываний превышает допустимое
} ProtectionStateMainId;

//eGrPS_InterChannel = 0x02 ***************************************************
/// \brief Идентификаторы отказов компонента InterChannel.h
///
typedef enum
{
    //*************************************************************************
    /// \brief указан неверный идентификатор параметра
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - :
    ///     - параметр 2 - идентификатор параметра;
    ///     - параметр 3 - синхронизируемые данные;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChIdError = 0x01,

    //*************************************************************************
    /// \brief не выполнена настройка сценария синхронизации
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - номер функции:
    ///          - \a setRemote;
    ///          - \a setLocalAck;
    ///          - \a synchronize;
    ///          - \a setParamSettings;
    ///          - \a updateData;
    ///          - \a stateChanged.
    ///     - параметр 2 - идентификатор параметра;
    ///     - параметр 3 - синхронизируемые данные;
    ///     - параметр 4 - номер сценария.
    ///
    ePS_IntChScript = 0x02,

    //*************************************************************************
    /// \brief от соседнего канала принят параметр с локальным сценарием
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///
    ///     - параметр 1 - номер функции:
    ///          - \a setRemote;
    ///          - \a setLocalAck;
    ///          - \a synchronize;
    ///     - параметр 2 - идентификатор параметра;
    ///     - параметр 3 - синхронизируемые данные;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChRemoteLocalScr = 0x03,

    //*************************************************************************
    /// \brief повторный запрос на синхронизацию параметра
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются:
    ///     - параметр 1 - номер функции:
    ///          - \a setRemote;
    ///          - \a setLocalAck;
    ///          - \a synchronize;
    ///     - параметр 2 - идентификатор параметра;
    ///     - параметр 3 - синхронизируемые данные;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChRepeat = 0x04,

    //*************************************************************************
    /// \brief ошибка при выполнении основного сценария передачи данных
    /// При выполнении передачи был принят параметр от соседнего канала.
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - 0;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChTrError1 = 0x05,

    //*************************************************************************
    /// \brief ошибка при выполнении альтернативного сценария передачи данных
    /// \note При выполнении приема параметра поступил запрос на синхронизацию.
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - 0;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChTrError2 = 0x06,

    //*************************************************************************
    /// \brief неверно задана процедура контроля
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - 0;
    ///     - параметр 3 - идентификатор процедуры контроля;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChProcCheck = 0x07,

    //*************************************************************************
    /// \brief неверно задана процедура синхронизации
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - 0;
    ///     - параметр 3 - идентификатор процедуры контроля;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChProcSync = 0x08,

    //*************************************************************************
    /// \brief драйвер линии связи вернул неправильное количество байт
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - номер функции: 
    ///          - \a runCommunication;
    ///          - \a setCommunicationData;
    ///          - \a getCommunicationData.
    ///     - параметр 2 - количество прочитанных данных;
    ///     - параметр 3 - требуемое количество данных;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChInputDriverGetError = 0x09,

    //*************************************************************************
    /// \brief не указан драйвер линии связи
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - номер функции:
    ///          - \a ctor;
    ///          - \a runCommunication.
    ///     - параметр 2 - идентификатор ошибочного указателя:
    ///          - ошибка указателя данных драйвера; 
    ///          - ошибка указателя таблицы функций драйвера;
    ///          - ошибка указателя на функцию \a isInReady; 
    ///          - ошибка указателя на функцию \a get;
    ///          - ошибка указателя на функцию \a isOutReady;
    ///          - ошибка указателя на функцию \a set;
    ///          - ошибка указателя на функцию \a run.
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChIoDriverError = 0x0A,

    //*************************************************************************
    /// \brief превышено время ожидания параметров синхронизации от обоих каналов
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - \a m_operatingValue;
    ///     - параметр 3 - \a m_remoteValue;
    ///     - параметр 4 - \a m_localValue.
    ///
    ePS_IntChTime1Error = 0x0B,
    
    //*************************************************************************
    /// \brief Превышено время формирования синхронизированного параметра T2
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - \a m_operatingValue;
    ///     - параметр 3 - \a m_remoteValue;
    ///     - параметр 4 - \a m_localValue.
    ///
    ePS_IntChTime2Error = 0x0C,
    
    //*************************************************************************
    /// \brief Превышено время периода поступления запросов на синхронизацию T3
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - \a m_operatingValue;
    ///     - параметр 3 - \a m_remoteValue;
    ///     - параметр 4 - \a m_localValue.
    ///
    ePS_IntChTime3Error = 0x0D,        
  
    //*************************************************************************
    /// \brief при обработке контролируемых времен, указан несуществующий 
    /// индекс контролируемого времени.
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - индекс контролируемого таймера 0, 1, 2;
    ///     - параметр 2 - количество контролируемых таймеров;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChConTimeIndexError = 0x0E,

    //*************************************************************************
    /// \brief неправильно указана фаза работы передатчика \a CAN
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - 0;
    ///     - параметр 2 - 0;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChTrPhase = 0x0F,

    //*************************************************************************
    /// \brief неправильное состояние флагов при обновлении данных по 
    /// результатам синхронизации
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра;
    ///     - параметр 2 - флаги;
    ///     - параметр 3 - скрипт;
    ///     - параметр 4 - 0.
    ///
    ePS_IntChCollision = 0x10,

    //*************************************************************************
    /// \brief указано недопустимое значение Т1
    /// \details Время Т1 контролируется только для сценария синхронизация параметра eScriptSync
    /// и для этого сценария должно быть обязательно задано. Для других сценариев
    /// время Т1 должно быть задано как ноль.
    /// \note При отказе с этим идентификатором в черный ящик сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор параметра
    ///     - параметр 2 - сценарий синхронизации #InterChannelScript
    ///     - параметр 3 - значение времени Т1
    ///     - параметр 4 - 0
    ///           
    ePS_IntChT1ValueError  = 0x11,
            
} ProtectionStateInterChannelId;

//eGrPS_CanDrv = 0x03 *********************************************************
/// \brief Идентификаторы отказов модуля драйвера \a CAN.
///
typedef enum
{
    ePS_CanDrvSetSize  = 1,    ///< массив, который необходимо передать больше или меньше буфера передатчика
    ePS_CanDrvNumPort  = 2,    ///< неправильно указан порт модуля \a CAN 
    ePS_CanDrvSelf     = 3,    ///< неправильный указатель на структуру с данными драйвера
    ePS_CanDrvErrorAlg = 4,    ///< ошибка алгоритмов
} ProtectionStateCanDrvId;

//eGrPS_CanAckDrv = 0x04 ******************************************************
/// \brief Идентификаторы отказов модуля управления драйвером EcanAck_driverPIC33.h.
///
typedef enum
{
    ePS_CanAckDrvSetSize = 1,    ///< массив, который необходимо передать больше или меньше буфера передатчика
    ePS_CanAckDrvNotAck  = 2,    ///< отсутствие подтверждения на передачу данных
} ProtectionStateCanAckDrvId;

//eGrPS_BinIn = 0x05 **********************************************************
/// \brief Идентификаторы отказа компонента BinIn.h.
///
typedef enum
{
    /// \brief неисправность тестирования дешифратора дискретных входов.
    /// \note При отказе с этим идентификатором в черный ящик сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - состояние входов дешифратора при тесте (инвертированное);
    ///     - параметр 2 - эталонное состояние входов дешифратора при тесте (инвертированное);
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_BinInErrorTestDecoder = 1,    ///< 
} ProtectionStateBinInId;

//eGrPS_AnalogInput = 0x06 ****************************************************
/// \brief Идентификаторы отказов компонента AnalogInput.h.
///
typedef enum
{
    /// \brief указан несуществующий идентификатор измерительного канала
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - номер функции:
    ///          - \a setChannelSettings;
    ///          - #AnalogInput_getData.
    ///     - параметр 2 - идентификатор измерительного канала;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_AinErrorChannel = 1,

    /// \brief указан несуществующий алгоритм дополнительной обработки сигнала
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - номер функции:
    ///          - \a setChannelSettings;
    ///          - #AnalogInput_getData;
    ///          - #AnalogInput_run.
    ///     - параметр 2 - идентификатор измерительного канала;
    ///     - параметр 3 - идентификатор алгоритма дополнительной обработки сигнала;
    ///     - параметр 4 - 0.
    ///
    ePS_AinErrorScript = 2,

    //*************************************************************************
    /// \brief указан несуществующий идентификатор фильтра
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются
    /// следующие параметры:
    ///     - параметр 1 - идентификатор фильтра;
    ///     - параметр 2 - частота пропускания;
    ///     - параметр 3 - номер функции:
    ///          - #DigitalFilter_run;
    ///          - #AnalogInput_setChannelSettings.
    ///     - параметр 4 - 0.
    ///
    ePS_AinErrorDfId = 3,

    //*************************************************************************
    /// \brief указана несуществующая частота пропускания
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - идентификатор фильтра;
    ///     - параметр 2 - частота пропускания;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_AinErrorDfFreq = 4,

    //*************************************************************************
    /// \brief драйвер АЦП поместил в очередь больше значений, чем ожидалось
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - номер функции:
    ///          - #AnalogInput_run.
    ///     - параметр 2 - количество данных, прочитанных из очереди;
    ///     - параметр 3 - ожидаемое количество данных;
    ///     - параметр 4 - 0.
    ///
    ePS_AinErrorDriverGet = 5,

    //*************************************************************************
    /// \brief значение #AVERAGE_WINDOW_SIZE имеет недопустимое значение
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - номер функции:
    ///          - #AnalogInput_run.
    ///     - параметр 2 - AVERAGE_WINDOW_SIZE
    ///
    ePS_AinErrorIncorrectValueAWS = 6
} ProtectionStateAnalogInputId;

//eGrPS_AdcDrv = 0x07  ********************************************************
/// \brief Идентификаторы отказов модуля драйвера ADC.h.
///
typedef enum
{
    ePS_AdcDrvSetSize = 1,    ///< массив,в который необходимо передать больше или меньше длины в запросе
    ePS_AdcDoneError  = 2,    ///< отсутствует готовность АЦП
    ePS_AdcOverflow   = 3,    ///< очередь драйвера переполнилась
    ePS_AdcDrvSelf    = 4,    ///< неправильный номер модуля
    ePS_AdcNoInic     = 5     ///< обращение к модулю, который не проинициализирован
} ProtectionStateAdcDrvId;

//eGrPS_Eeprom = 0x08  ********************************************************
/// \brief Идентификаторы отказов драйвера \a EEPROM.
///
typedef enum
{
    ePS_EepromNoWork     = 1,    ///< \a EEPROM недоступен
    ePS_EepromAccess     = 2,    ///< не завершена предыдущая операция с \a EEPROM
    ePS_EepromParameters = 3,    ///< ошибка параметров вызова
    ePS_EepromInicLink   = 4     ///< ошибка при инициализации линии связи с \a EEPROM
} ProtectionStateEepromId;

//eGrPS_ControlMK  = 0x09  ****************************************************
/// \brief Идентификаторы отказов компонента ControlMK.h.
///
typedef enum
{
    //*************************************************************************
    /// \brief несовпадение обобщенного результата проверки МК с эталонным
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - обобщенный результат проверки;
    ///     - параметр 2 - эталонное значение результата проверки;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_ControlMkFault = 1,

    //*************************************************************************
    /// \brief ошибка при проверке контрольной суммы Flash-памяти
    /// \note При отказе с этим идентификатором сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - подсчитанное значение контрольной суммы Flash-памяти;
    ///     - параметр 2 - эталонное значение контрольной суммы Flash-памяти;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_ControlMkFaultFlash = 2,

    //*************************************************************************
    /// \brief ошибка контрольной суммы ОЗУ
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - 0;
    ///     - параметр 2 - 0;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_ControlMkFaultRAM = 3,

    //*************************************************************************
    /// \brief ошибка контрольной суммы регистров конфигурации
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - подсчитанное значение контрольной суммы регистров конфигурации;
    ///     - параметр 2 - эталонное значение контрольной суммы регистров конфигурации;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_ControlMkFaultConfig = 4,

    //*************************************************************************
    /// \brief ошибка основных регистров, используемых при работе
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - 0;
    ///     - параметр 2 - 0;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_ControlMkFaultRegisters = 5,

    //*************************************************************************
    /// \brief ошибка при контроле вызовов функций
    /// \note При отказе с этим идентификатором в "черный ящик" сохраняются 
    /// следующие параметры:
    ///     - параметр 1 - текущее значение счетчика вызовов функций;
    ///     - параметр 2 - эталонное значение счетчика вызовов функций;
    ///     - параметр 3 - 0;
    ///     - параметр 4 - 0.
    ///
    ePS_ControlMkFaultCallFunctions = 6,

    //*************************************************************************
    ePS_ControlMkFaultCPU = 7,    ///< ошибка CPU

    //*************************************************************************
    ePS_InterruptCPU = 8          ///< прерывание во время теста процессора, угроза разрушения данных
} ProtectionStateControlMkId;

// eGrPS_Rs422 = 0x0B  ********************************************************
/// \brief Отказы модуля обмена по интерфейсу RS-422.
///
typedef enum
{
    ePS_Rs422StepCntError  = 1,    ///< ошибка счетчика состояния
    ePS_Rs422TimeOutError  = 2,    ///< ошибка таймаута
    ePS_Rs422SettingsError = 3     ///< ошибки установок параметров
} ProtectionStateRs422;

//eGrPS_BlockExch = 0x0C *************************************************************
/// \brief Отказы модуля BlockExch.h.
///
typedef enum
{
    ePS_BlockExchErrorDataLength = 1,    ///< неправильно задана длина данных обмена 
    ePS_BlockExchErrorReceive    = 2,    ///< ошибка синхронизации принимаемых данных
    ePS_BlockExchErrorStartSync  = 3     ///< ошибка начальной синхронизации 
} ProtectionStateBlockExch;

//eGrPS_DeviceAddress = 0x0D **************************************************
/// \brief Отказы модуля DeviceAddress.h.
///
typedef enum
{
    ePS_DeviceAddressFirstCheckError = 1,    ///< ошибка при 1-ой проверке перемычек
    ePS_DeviceAddressCheckError      = 2,    ///< ошибка при периодической проверке перемычек
    ePS_DeviceAddressStepCntError    = 3     ///< ошибка переменной состояния 
} ProtectionStateDeviceAddress;

//eGrPS_RelayCtrl = 0x0E  *****************************************************
/// \brief Отказы модуля RelayCtrl.h.
///
typedef enum
{
    ePS_RelayCtrlStepCnt1error = 1,    ///< ошибка счетчика состояния 1
    ePS_RelayCtrlStepCnt2error = 2,    ///< ошибка счетчика состояния 2
    ePS_RelayCtrlStepCnt3error = 3,    ///< ошибка счетчика состояния 3
    ePS_RelayCtrlStepCnt4error = 4     ///< ошибка счетчика состояния 4
} ProtectionStateRelayCtrl;

//eGrPS_OverloadDetector = 0х10 ***********************************************
/// \brief Идентификаторы ошибок модуля определения перегрузки по току. 
///
typedef enum
{
    ePS_OverloadDetectorHardwareFailurePower = 1,    ///< аппаратная неисправность силовой части
	
	//*****************************************************************************
	/// \brief неопределённое состояние автомата состояний определения КЗ силового генератора
	///
    ePS_OverloadDetectorStateCntSCError      = 2,
	
	//*****************************************************************************
	/// \brief неопределённое состояние автомата состояний определения КЗ контрольного генератора
	///
    ePS_OverloadDetectorStateCntGenError     = 3,
	
    ePS_OverloadDetectorHardFailGen          = 4     ///< аппаратная неисправность контрольного генератора
} ProtStateOverlDetect;

//eGrPS_PositionDet = 0x11  ***************************************************
/// \brief Идентификаторы ошибок модуля определения положения.
///
typedef enum
{
    ePS_PosDetStepCnt1error       = 1,    ///< неиспользуемый тип схемы контроля положения стрелки
    ePS_PosDetGenStepCntError     = 2,    ///< ошибка счетчика состояния измерительного генератора
    ePS_PosDetGenFeedBackContrGen = 3     ///< выход за установленные пределы напряжения измерительного генератора
} ProtStatePositionDet;

//eGrPS_ShuntShift = 0x12  ****************************************************
/// \brief Идентификаторы ошибок модуля перевода стрелки.
///
typedef enum
{
    ePS_ShuntShiftTypeErr              = 1,    ///< несуществующий тип включения стрелки
    ePS_ShiftMotorCnt1Err              = 2,    ///< ошибка счетчика состояния Cnt1
    ePS_ShiftMotorCnt2Err              = 3,    ///< ошибка счетчика состояния Cnt2 
    ePS_ShuntShiftFiveEcCntErr         = 4,    ///< ошибка счетчика управления переводом c модулем реле 5-ЭЦ
    ePS_ShuntShiftNineWireCntErr       = 5,    ///< ошибка счетчика управления переводом c модулем реле 9-ти проводным
    ePS_ShuntShiftFiveEcMismatchSetPos = 6,    ///< несоответствие установленной позиции определения положения
    ePS_ShuntShiftFiveEcMismatchSetDir = 7,    ///< несоответствие установленной позиции перемещения
    ePS_ShuntShiftFiveEcMotorNotStoped = 8,    ///< двигатель не остановлен.
    ePS_ShuntShiftGenStepCntErr        = 9,    ///< ошибка счетчика автомата состояния модуля ShuntShiftGen.h
    /// \brief ошибка обратной связи по напряжению 3-фазного генератора при работе двигателя
    ///
    ePS_ShiftMotorUfeedback                = 10
} ProtStateShuntShift;

// eGrPS_SafetyPowerControl = 0x13 (19d) **************************************
/// \brief Отказы модуля безопасного управления питанием.
///
typedef enum
{
    ePS_SPC_PeriodicCheckFault = 1,    ///< ошибка периодического контроля состояния ключей
    ePS_SPC_TestCheckFault     = 2,    ///< ошибка контроля состояния обратной связи
    ePS_SPC_FSM_UnknownState   = 3     ///< ошибка работы автомата состояний (неизвестное состояние)
} ProtectionStateSafetyPowerControl;

//ePS_IntegrCtrl = 0x14(20d)  ******************************************************
/// \brief Идентификаторы ошибок модуля контроля целостности рабочих цепей стрелки.
///
typedef enum
{
    ePS_IntegrCtrlStepCntError    = 1,    ///< ошибка автомата состояний модуля IntegrCtrl.h
    ePS_IntegrCtrlGenStepCntError = 2,    ///< ошибка автомата состояний модуля IntegrCtrlGen.h
    ePS_CorrectorIsFail           = 3,    ///< ошибка при тестировании корректора коэффициента мощности 
    ePS_SafePhaseVoltage          = 4     ///< опасный уровень напряжения при тестировании рабочих цепей  
} ProtectionStateIntegrCtrl;

//0x15(21d)****************************************************************************
/// \brief Идентификаторы отказа компонента ControlSupplyVoltage.h
typedef enum 
{

    ePS_FaultU5V       = 1,                  ///< ошибка при проверке питания 5 В
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - верхний допуск, %,
                                             // параметр 4 - нижний допуск, %.
                                             //

    ePS_FaultURef       = 2,                 ///< ошибка при проверке опорного питания АЦП
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - верхний допуск, %,
                                             // параметр 4 - нижний допуск, %.
                                             //

    ePS_FaultBufferADC    = 3,               ///< ошибка при проверке буферного регистра АЦП
                                             // При отказе с этим идентификатором в черный ящик сохраняются 
                                             // следующие параметры:
                                             // параметр 1 - текущее значение контролируемого сигнала,
                                             // параметр 2 - эталонное значение контролируемого сигнала,
                                             // параметр 3 - маска сигнала,
                                             // параметр 4 - 0.
                                             //
    } ProtectionStateControlSupplyVoltage;

#endif

//*****************************************************************************
/**
* История изменений:
*
* Версия 1.0.1
* Автор  Годунок А.Н.
*
* Изменения:
*    Базовая версия.
*
* Версия 2.0.1
* Дата   20-05-2017
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Изменения под новую схему на dsPIC33.
*
* Версия 2.0.2
* Дата   08-07-2019
* Автор  Годунок А.Н. 
*
* Изменения:
*     1) Добавлен новый код защитного отказа ePS_IntChT1ValueError для 
* группы eGrPS_InterChannel;
*
* Версия 2.0.3 
* Дата   10-01-2020
* Автор  Агулов М.А.
*
* Изменения:
* Добавлены доп. параметры для кода отказа ePS_MainUnusedInterrupt.
*
*/
