/**
* \file    shuntShiftMotor.h
* \brief   Управление двигателем
* \details Интерфейс
*
* \version 1.0.2
* \date    15-10-2020
* \author  Кругликов В.П.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef SHUNTSHIFTMOTOR_H
#define SHUNTSHIFTMOTOR_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "DeviceAddress.h"
#include "AnalogMeasurement.h"

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Типы неисправностей рабочих цепей.
///
typedef enum 
{
    eNorm            = 0,        ///< двигатель исправен
    eBreakAllPhases,             ///< обрыв всех фаз
    eShortCircuit,               ///< КЗ фаз
    eBreakOnePhase,              ///< обрыв одной фазы
    eOverloadCircuit             ///< перегрузка по току
} MotorFailure;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация модуля управления двигателем.
/// \param motor - тип двигателя (один из МСТ–0,25-127, МСТ–0,25-220 
/// МСТ–0,3-110, МСТ–0,3-190, МСТ–0,6-110, МСТ–0,6-190), которым осуществляется управление.
///
void ShuntShiftMotor_ctor( MotorType motor );

//*****************************************************************************
/// \brief Управление работой модуля управления двигателем.
/// \note Вызывается из главного цикла с периодом 1 мс.
///
void ShuntShiftMotor_run( void );

//*****************************************************************************
/// \brief Включение двигателя.
/// \param stand - true (работа на стенд), false (работа на двигатель);
/// \param dir   - направление вращения ( true - "Положение плюс", false - "Положение минус").
///
void ShuntShiftMotor_turnOn( bool stand, bool dir );

//*****************************************************************************
/// \brief Выключение двигателя.
///
void ShuntShiftMotor_turnOff( void );

//*****************************************************************************
/// \brief Проверка состояния модуля.
/// \retval true  - включен;
/// \retval false - выключен.
///
bool ShuntShiftMotor_isOn( void );

//*****************************************************************************
/// \brief Получить причину неисправности.
/// \return Состояние рабочих цепей.
///
MotorFailure ShuntShiftMotor_getFailure( void );

//*****************************************************************************
/// \brief Получить время работы двигателя.
/// \return Время работы двигателя, мс.
///
uint16_t ShuntShiftMotor_getWorkingTime( void );

//*****************************************************************************
/// \brief Установить неисправность рабочих цепей.
/// \param value - тип неисправности двигателя, принимающей одно из значений:
///     - 0 - двигатель исправен;
///     - 1 - обрыв всех фаз;
///     - 2 - КЗ фаз;
///     - 3 - обрыв одной фазы;
///     - 4 - перегрузка по току.
/// 
void ShuntShiftMotor_setFailure( MotorFailure value );

//*****************************************************************************
/// \brief  Получить состояние пtрегрузки по току
/// \return Значение бита перегрузки по току
///
bool ShuntShiftMotor_getIsOvlCurr( void );

//*****************************************************************************
/// \brief Установить состояние перегрузки по току
/// \param value - Устанавливаемо значение перегрузки по току
///
void ShuntShiftMotor_setIsOvlCurr( bool value );

//*****************************************************************************
/// \brief Вернуть среднее значение токов фаз во время перевода
uint16_t ShuntShiftMotor_getAverageThreePhasesCurrent( void );

extern uint16_t timeoutForAverageInWindow;

#endif

//*****************************************************************************
/**
* История изменений: 
* 
* Версия 1.0.1
* Дата   24-01-2018
* Автор  Кругликов В.П.
* 
* Изменения:
*     Базовая версия.
* 
* Версия 1.0.2
* Дата   15-10-2020
* Автор  Кругликов В.П.
* 
* Изменения:
*   добавлены объявления интерфейсов ShuntShiftMotor_getIsOvlCurr и ShuntShiftMotor_setIsOvlCurr.  
*/
