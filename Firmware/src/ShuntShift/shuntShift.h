/**
* \file    shuntShift.h
* \brief   Управление переводом стрелки
* \details Интерфейс
*
* \version 1.0.1
* \date    02-02-2018
* \author  Кругликов В.П.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef SHUNTSHIFT_H
#define SHUNTSHIFT_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdbool.h>
#include <stdint.h>
#include "DeviceAddress.h"
#include "positionDet.h"

//*****************************************************************************
// Определение типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Направление перевода.
///
typedef enum 
{
    eShiftStop  = 0,        ///< остановка
    eShiftPlus,             ///< в "Положение плюс"
    eShiftMinus             ///< в "Положение минус"
} ShiftDirection;

//*****************************************************************************
/// \brief Результат перевода.
///
typedef enum 
{
    eShiftNormal     = 0,         ///< нормальное состояние – перевод закончен
    eShiftActive,                 ///< процесс перевода активен
    eShiftSecondTry,              ///< перевод осуществлен со 2-ой попытки
    eShiftFail                    ///< перевод закончился неудачей
} ShiftDgn;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация.
/// \param relayType - тип модуля реле;
/// \param motor     - тип электродвигателя.
///
void ShuntShift_ctor( RelayModuleType relayType, MotorType motor );

//*****************************************************************************
/// \brief Управление работой.
/// \note Вызывается из главного цикла с периодом 1 мс.
///
void ShuntShift_run( void );

//*****************************************************************************
/// \brief Включение перевода стрелки.
/// \param dir  - направление перевода(true (+), false (-));
/// \param time - устанавливаемое время перевода, мс;
/// \param st   - состояние работы (true (на стенде), false (не на стенде));
/// \param rs   - режим повторного перевода (true (включен), false (отключен)).
///
void ShuntShift_turnOn( bool dir, uint16_t time, bool st, uint8_t rs );

//*****************************************************************************
/// \brief Выключение перевода стрелки.
/// 
void ShuntShift_turnOff( void );

//*****************************************************************************
/// \brief Передача положения стрелки.
/// \param detPos - установленная позиция контроля положения;
/// \param pos    - фактическое положение стрелки.
///
void ShuntShift_setDetPos( PositionDet_State detPos, PositionDet_State pos );

//*****************************************************************************
/// \brief Передача установленной позиции перевода.
/// \param shiftPos - установленная позиция перевода.
///
void ShuntShift_setShiftPos( ShiftDirection shiftPos );

//*****************************************************************************
/// \brief Проверка состояния перевода стрелки.
/// \retval true  - включен;
/// \retval false - выключен.
///
bool ShuntShift_isEnable( void );

//*****************************************************************************
/// \brief Запрос на установку позиции контроля положения.
/// \return Позиция контроля положения 
/// \retval 0 - потеря контроля;
/// \retval 1 - положение плюс;
/// \retval 2 - положение минус;
/// \retval 3 - неопределённое состояние.
///
PositionDet_State ShuntShift_getReqPosDet( void );

//*****************************************************************************
/// \brief Запрос на установку позиции направления перевода.
/// \return Позиция направления перевода.
///
ShiftDirection ShuntShift_getReqShiftDir( void );

//*****************************************************************************
/// \brief Получить время последнего перевода.
/// \return Время последнего перевода, мс.
///
uint16_t ShuntShift_getTime( void );

//*****************************************************************************
/// \brief Получить значение поля статуса dgn.
/// \return Значение dgn.
///
ShiftDgn ShuntShift_getDgn( void );


//*****************************************************************************
/// \brief Установить значение счётчика фазы стрелочного перевода.
/// \param val - устанавливаемое значение. 
///
void ShuntShift_setCntPhaseShift( const uint8_t val );

//*****************************************************************************
/// \brief Получить значение счётчика фазы стрелочного перевода.
/// \return - Значение счётчика фазы стрелочного перевода 
///
const uint8_t ShuntShift_getCntPhaseShift( void );


//*****************************************************************************
/// \brief Проверка того, что модуль прошёл режим инициализации
/// \return true - модуль в рабочем режиме , false - модуль в  режиме инициализации 
///
const bool ShuntShift_isWorkMode( void );

#endif

//*****************************************************************************
/**
* История изменений:
*
* Версия 1.0.1
* Дата   02-02-2018
* Автор  Кругликов В.П.
*
* Изменения:
*    Базовая версия.
*/
