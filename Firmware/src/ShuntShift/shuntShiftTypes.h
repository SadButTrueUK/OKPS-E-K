/**
* \file    shuntShiftTypes.h
* \brief   Прототипы функций управления переводом.
*
* \version 1.0.1
* \date    06-11-2018
* \author  Кругликов В.П.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef SHUNTSHIFTTYPES_H
#define SHUNTSHIFTTYPES_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include "shuntShift.h"
#include "positionDet.h"

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Прототип функции инициализации.
/// 
typedef void( *pfShuntShiftCtor )( void );

//*****************************************************************************
/// \brief Прототип функции управления работой.
/// 
typedef void( *pfShuntShiftRun )( void );

//*****************************************************************************
/// \brief Прототип функции выключения.
/// 
typedef void( *pfShuntShiftTurnOff )( void );

//*****************************************************************************
/// \brief Прототип функции запроса на установку позиции контроля положения.
///
typedef PositionDet_State( *pfShuntShiftGetReqPosDet )( void );

//*****************************************************************************
/// \brief Прототип функции запроса на установку позиции направления перевода.
///
typedef ShiftDirection( *pfShuntShiftGetReqShiftDir )( void );

//*****************************************************************************
/// \brief Прототип функции получения времени последнего перевода.
///
typedef uint16_t( *pfShuntShiftGetTime )( void );

//*****************************************************************************
/// \brief Прототип функции получения состояния перевода.
///
typedef ShiftDgn( *pfShuntShiftGetDgn )( void );

//*****************************************************************************
/// \brief Прототип функции проверки состояния включения.
///
typedef bool( *pfShuntShiftIsEnable )( void );

//*****************************************************************************
/// \brief Прототип указателя на функцию включения.
/// \param dir  - состояние направления (true (+), false (-));
/// \param time - устанавливаемое время перевода, мс;
/// \param st   - состояние работы (true (на стенде), false (не на стенде));
/// \param rs - режим повторного перевода включен/отключен.
///
typedef void( *pfShuntShiftTurnOn )( bool dir, uint16_t time, bool st, uint8_t rs );

//*****************************************************************************
/// \brief Прототип указателя на функцию передачи положения.
/// \param detPos   - установленная позиция контроля положения;
/// \param position - фактическое положение стрелки.
///
typedef void( *pfShuntShiftSetDetPos )( PositionDet_State detPos, PositionDet_State position );

//*****************************************************************************
/// \brief Прототип указателя на функцию передачи установленной позиции перевода.
/// \param shiftPos - установленная позиция перевода.
///
typedef void( *pfShuntShiftSetShiftPos )( ShiftDirection shiftPos );

//*****************************************************************************
/// \brief Прототип указателя на функцию установки значения счётчика фазы стрелочного перевода.
/// \param val - устанавливаемое значение. 
///
typedef void ( *pfSetCntPhaseShift ) (const uint8_t val);

//*****************************************************************************
/// \brief Прототип указателя на функцию получения значения счётчика фазы стрелочного перевода.
/// \return - Значение счётчика фазы стрелочного перевода 
///
typedef const uint8_t ( *pfGetCntPhaseShift ) ( void );

//*****************************************************************************
/// \brief Прототип указателя на функцию установки поля dgn телеграммы статуса
/// \param val - устанавливаемое значение. 
///
typedef const bool ( *pfShuntShiftIsWorkMode) ( void );

//*****************************************************************************
/// \brief Прототип указателя на функцию проверки того, что перевод стрелки не в инициализации
/// \return - Значение счётчика фазы стрелочного перевода 
///
typedef void ( *pfShuntShiftSetDgn ) ( ShiftDgn val ); 

//*****************************************************************************
/// \brief Прототип указателя на функцию установки времени последнего перевода
/// \return - Значение счётчика фазы стрелочного перевода 
///
typedef void ( *pfShuntShiftSetTime ) ( uint16_t val );

//*****************************************************************************
/// \brief Структура внутреннего интерфейса модуля.
///
typedef struct ArrayShuntShift_tag 
{
    pfShuntShiftCtor           ctor;                  ///< Инициализация компонента "Перевод стрелки". 
    pfShuntShiftRun            run;                   ///< Управление работой компонента "Перевод стрелки".
    pfShuntShiftTurnOn         turnOn;                ///< Включение перевода стрелки.
    pfShuntShiftTurnOff        turnOff;               ///< Выключение перевода стрелки.
    pfShuntShiftSetDetPos      setDetPos;             ///< Передача положения стрелки.
    pfShuntShiftSetShiftPos    setShiftPos;           ///< Передача установленной позиции перевода стрелки.
    pfShuntShiftIsEnable       isEnable;              ///< Проверка состояния перевода стрелки.
    pfShuntShiftGetReqPosDet   getReqPosDet;          ///< Запрос на установку позиции контроля положения стрелки.
    pfShuntShiftGetReqShiftDir getReqShiftDir;        ///< Запрос на установку позиции направления перевода стрелки.
    pfShuntShiftGetTime        getTime;               ///< Получить время последнего перевода стрелки.
    pfShuntShiftGetDgn         getDgn;                ///< Получить состояние перевода стрелки.
    pfSetCntPhaseShift         setCntPhaseShift;      ///< Установить значение счётчика фазы стрелочного перевода
    pfGetCntPhaseShift         getCntPhaseShift;      ///< Получить значение счётчика фазы стрелочного перевода.
    pfShuntShiftIsWorkMode     isWorkMode;            ///< Проверка того, что модуль НЕ в инициализации
    pfShuntShiftSetDgn         setDgn;                ///< Установка поля dgn статуса из другого модуля
    pfShuntShiftSetTime        setTimeShift;          ///< Установить время последнего перевода
} ArrayShuntShift;

#endif

//*****************************************************************************
/**
* История изменений: 
* 
* Версия 1.0.1
* Дата   06-11-2018
* Автор  Кругликов В.П.
* 
* Изменения:
*    Базовая версия.
*/
