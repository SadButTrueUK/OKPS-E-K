/**
* \file    Indication.h
* \brief   Управление индикацией
* \details Интерфейс
*
* \version 1.0.1
* \date    24-02-2017
* \author  Байдаченко В.В.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef INDICATION_H
#define INDICATION_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdbool.h>
#include <stdint.h>

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Начальные фазы.
///
typedef enum 
{
    eIndPhNormal = 0,   ///< нормальная начальная фаза
    eIndPhInvert        ///< инвертированная начальная фаза
} IndOutPhase;

//*****************************************************************************
/// \brief Список флагов состояний индикатора.
///
typedef enum 
{
    eOffState = 0,      ///< индикатор выключен
    eOnState,           ///< индикатор включен
    ePulseOnState,      ///< индикатор включен однократно на заданное время
    ePulseOffState,     ///< индикатор выключен однократно на заданное время
    eBlinkPrdState,     ///< индикатор мигает циклически
    eBlinkTwiceState    ///< индикатор мигает циклически с двойным периодом
} IndOutSetting;

//*****************************************************************************
/// \brief Тип управления индикатором.
///
typedef enum 
{
    eCtrEnHigh = 0, ///< включение индикатора логической единицей
    eCtrEnLow       ///< включение индикатора логическим нулем
} IndCtrType;

//*****************************************************************************
/// \brief Тип - структура ножки порта ввода-вывода индикатора.
///
typedef struct 
{
    volatile uint16_t *trisPort;                   ///< Указатель на регистр настройки направления данных.
    volatile uint16_t *pinPort;                    ///< Указатель на адрес порта.
    uint16_t          pinNum;                      ///< Номер линии порта.
} indPortSet_type;

//*****************************************************************************
/// \brief Структура объекта индикатора.
///
typedef struct 
{
    /// \brief Флаг о назначении объекта: (true (объект является заглушкой), false (объект является действительным)).
    ///
    bool isDummy;
    
    indPortSet_type outPin;         ///< Переменная типа структуры ножки порта ввода-вывода индикатора.
    IndCtrType      outCtrType;     ///< Переменная типа управления индикатором.
    IndOutSetting   outState;       ///< Переменная типа флаг состояния индикатора.
    IndOutPhase     outPhase;       ///< Переменная типа начальная фаза (используется при циклических миганиях).
    uint16_t        tOn1;           ///< Задание включенного состояния 1-го периода.
    uint16_t        tOff1;          ///< Задание выключенного состояния 1-го периода.
    uint16_t        tOn2;           ///< Задание включенного состояния 2-го периода.
    uint16_t        tOff2;          ///< Задание выключенного состояния 2-го периода.
    uint16_t        cntOn1;         ///< Счетчик включенного состояния 1-го периода.
    uint16_t        cntOff1;        ///< Счетчик выключенного состояния 1-го периода.
    uint16_t        cntOn2;         ///< Счетчик включенного состояния 2-го периода.
    uint16_t        cntOff2;        ///< Счетчик выключенного состояния 2-го периода.
} indOutput_type;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация конкретного объекта индикатора.
/// \param h - указатель на объект индикатора с его набором свойств;
/// \param trisOut - указатель на регистр настройки направления данных;
/// \param portOut - указатель на адрес порта;
/// \param pinOut - номер линии порта;
/// \param ctrType - тип управления индикатором.
///
void Indication_ctorLed( indOutput_type *h, volatile uint16_t *trisOut,
        volatile uint16_t *portOut, uint16_t pinOut, IndCtrType ctrType );

//*****************************************************************************
/// \brief Инициализация конкретного объекта индикатора как заглушки.
/// \param h - указатель на объект индикатора с его набором свойств.
///
void Indication_ctorDummy( indOutput_type *h );

//*****************************************************************************
/// \brief Включение индикатора.
/// \param h - указатель на объект индикатора с его набором свойств.
///
void Indication_on( indOutput_type *h );

//*****************************************************************************
/// \brief Выключение индикатора.
/// \param h - указатель на объект индикатора с его набором свойств.
///
void Indication_off( indOutput_type *h );

//*****************************************************************************
/// \brief Мигание индикатором циклически с заданной начальной фазой.
/// \param h - указатель на объект индикатора с его набором свойств;
/// \param timeOn - время включенного состояния, мс;
/// \param timeOff - время выключенного состояния, мс;
/// \param outPhase - начальная фаза состояния индикатора.
///
void Indication_blink( indOutput_type *h, uint16_t timeOn, uint16_t timeOff, IndOutPhase outPhase );

//*****************************************************************************
/// \brief Мигание индикатором циклически с двойным периодом и заданной начальной фазой.
/// \param h - указатель на объект индикатора с его набором свойств;
/// \param timeOn1 - время включенного состояния 1-го периода, мс;
/// \param timeOff1 - время выключенного состояния 1-го периода, мс;
/// \param timeOn2 - время включенного состояния 2-го периода, мс;
/// \param timeOff2 - время выключенного состояния 2-го периода, мс;
/// \param outPhase - начальная фаза состояния индикатора.
///
void Indication_blink2( indOutput_type *h, uint16_t timeOn1, uint16_t timeOff1,
        uint16_t timeOn2, uint16_t timeOff2, IndOutPhase outPhase );

//*****************************************************************************
/// \brief Включение индикатора однократно на заданное время.
/// \param h - указатель на объект индикатора с его набором свойств;
/// \param time - время включенного состояния индикатора, мс.
///
void Indication_pulseOn( indOutput_type *h, uint16_t time );

//*****************************************************************************
/// \brief Обработка состояния конкретного объекта индикатора.
/// \param h - указатель на объект индикатора с его набором свойств.
///
void Indication_run( indOutput_type *h );

#endif

//*****************************************************************************
/**
* История изменений: 
*
* Версия 1.0.1
* Дата   24-02-2017
* Автор  Байдаченко В.В.
*
* Изменения:
*    Базовая редакция.
*/
