/**
* \file    I2Cdrv_PIC33.h
* \brief   Драйвер модуля I2C (Master) для МК dsPIC33
* \details Интерфейс
*
* \version 1.0.1
* \date    30-01-2017
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef I2CDRV_PIC33_H
#define I2CDRV_PIC33_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "IOports.h"

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************

//*****************************************************************************
#define I2C_F_100 585        ///< Уставка для частоты шины 100 кГц.

//*****************************************************************************
// Определение типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Номер модуля I2C.
///
typedef enum
{
    eI2C_module1      = 0,        ///< модуль 1 МК I2C
    eI2C_module2,                 ///< модуль 2 МК I2C
    eI2C_moduleAmount             ///< количество доступных модулей I2C
} eI2C_modules;

//*****************************************************************************
/// \brief Операции модуля I2C.
///
typedef enum 
{
    eI2C_modeWrite  = 0,        ///< запись
    eI2C_modeRead   = 1,        ///< чтение
    eI2C_modeAmount             ///< количество доступных операций I2C
} eI2C_modes;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Конструктор.
/// \param numberModule – номер модуля I2C;
/// \param addressDevice – адрес устройства, подключенного к шине I2C;
/// \param openDrain – подключение дискретных входов, с открытым стоком (1) или нет (0);
/// \param brg - делитель частоты Fcy, задает частоту шины.
/// \return Адрес драйвера, если 0 - то ошибка инициализации.
///
const void *I2Cdrv_ctor( eI2C_modules  numberModule,
                         uint8_t       addressDevice,
                         eIO_openDrain openDrain,
                         uint16_t      brg );

//*****************************************************************************
/// \brief Обмен по шине I2C.
/// \note Вызов с частотой 1 или 8 кГц.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор).
///
void I2Cdrv_run( const void *self );

//*****************************************************************************
/// \brief Установка параметров операции и запуск операции на шине I2C.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор);
/// \param mode – тип операции;
/// \param addressCell – адрес ячейки;
/// \param aData – указатель на адрес массива данных;
/// \param length – длина массива данных.
/// \return false при ошибке параметров запроса или неготовности устройства.
///
bool I2Cdrv_set( const void *self, uint8_t mode, uint16_t addressCell, uint8_t *aData, uint8_t length );

//*****************************************************************************
/// \brief Запрос готовности для новой операции на шине I2C.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор).
/// \retval true  - есть готовность;
/// \retval false - нет готовности.
///
bool I2Cdrv_isReady( const void *self );

//*****************************************************************************
/// \brief Запрос результата операции на шине I2C.
/// \param self - указатель на данные драйвера (адрес, который вернул конструктор).
/// \retval true  - успешное завершение операции;
/// \retval false - неуспешное завершение операции.
///
bool I2Cdrv_isOperationOk( const void *self );

#endif

//*****************************************************************************
/**
* История изменений: 
*
* Версия 1.0.1
* Дата   30-01-2017
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Базовая версия.
*/
