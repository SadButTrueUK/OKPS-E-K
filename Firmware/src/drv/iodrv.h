/**
* \file    iodrv.h
* \brief   Интерфейсы драйверов.
* \details Интерфейсы драйверов определяют структуры данных, которые содержат таблицы 
* вызовов функций драйверов и прототипы этих функций.
* \details Драйвера классифицируются по нескольким критериям:
* \details - в зависимости от набора функций в таблице вызовов;
* \details - в зависимости от прототипов функций, содержащихся в таблице вызовов.
*
* \details В зависимости от набора функций драйвера бывают:
* \details - драйвера ввода;
* \details - драйвера вывода;
* \details - драйвера ввода/вывода.
*
* \details В зависимости от прототипов функций драйвера отличаются набором параметров
* и типом этих параметров.
* \details Данный интерфейс описывает только различные таблицы вызовов. Данные, 
* специфические для работы драйвера, определяются при разработке 
* конкретного драйвера.
* 
* \version 2.0.1
* \date    27-11-2015
* \author  Годунок А.Н.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef IODRV_H
#define IODRV_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>

//*****************************************************************************
// Определение типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для типа данных \a uint16_t.
/// \param self – указатель на объект, для работы с которым вызывается функция.
/// \return Данные, принятые драйвером.
///
typedef uint16_t( *pfUint16Get )( const void *self );
 
//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для типа данных \a uint16_t.
/// \param self – указатель на объект, для работы с которым вызывается функция;
/// \param data – данные, передаваемые драйверу для дальнейшей обработки.
///
typedef void( *pfUint16Set )( const void *self, uint16_t data );

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для типа данных \a uint32_t.
/// \param self – указатель на объект, для работы с которым вызывается функция.
/// \return Данные, принятые драйвером.
///
typedef uint32_t( *pfUint32Get )( const void *self ); 

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для типа данных \a uint32_t.
/// \param self – указатель на объект, для работы с которым вызывается функция;
/// \param data – данные, передаваемые драйверу для дальнейшей обработки.
//
typedef void( *pfUint32Set )( const void *self, uint32_t data );

//*****************************************************************************
/// \brief Прототип функции чтения данных из драйвера для работы с массивами типа \a uint8_t.
/// \param self  – указатель на объект, для работы с которым вызывается функция;
/// \param array – указатель на массив, в который функция поместит данные, принятые драйвером;
/// \param size  – размер массива, в который функция поместит данные, принятые драйвером.
/// \return Количество байт, помещенных в массив \a array.
///
typedef int( *pfArrayGet )( const void *self, uint8_t *array, int size ); 

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для работы с массивами типа \a uint8_t.
/// \param self  – указатель на объект, для работы с которым 
/// вызывается функция;
/// \param array – указатель на массив c данными, которые нужно передать
/// драйверу для обработки;
/// \param size  – количество байт, передаваемых драйверу для обработки.
///
typedef void( *pfArraySet )( const void *self, uint8_t *array, int size );

//*****************************************************************************
/// \brief Прототип функции чтения данных в драйвер для типа данных \a BOOL.
/// \param self – указатель на объект, для работы с которым вызывается функция.
///
typedef bool( *pfBoolGet )( const void *self ); 

//*****************************************************************************
/// \brief Прототип функции записи данных в драйвер для типа данных \a BOOL.
/// \param self – указатель на объект, для работы с которым 
/// вызывается функция;
/// \param data – данные, передаваемые драйверу для дальнейшей обработки.
///
typedef void( *pfBoolSet )( const void *self, bool data ); 

//*****************************************************************************
/// \brief Прототип функции, выполняющей код, но не возвращающей 
/// значения.
/// \param self – указатель на объект, для работы с которым 
/// вызывается функция.
///
typedef void( *pfVoid )( const void *self ); 

//*****************************************************************************
/// \brief Интерфейс драйвера ввода для типа \a uint16_t.
///
typedef struct
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get get;
    
    /// \brief Готовность данных для чтения.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// 
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} Uint16InDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера вывода для типа \a uint16_t.
///
typedef struct
{
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    /// 
    pfUint16Set set;
    
    /// \brief Готовность драйвера к приему новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// 
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} Uint16OutDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для типа \a uint16_t.
///
typedef struct 
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint16Get get;
    
    /// \brief Готовность данных для чтения.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// 
    pfBoolGet isInReady;
   
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    /// 
    pfUint16Set set;
    
    /// \brief Готовность драйвера к приему новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// 
    pfBoolGet isOutReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} Uint16IoDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода для типа \a uint32_t.
///
typedef struct 
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    ///
    pfUint32Get get;
    
    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} Uint32InDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера вывода для типа \a uint32_t.
///
typedef struct 
{
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    /// 
    pfUint32Set set;
    
    /// \brief Готовность драйвера к приему новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// 
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} Uint32OutDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для типа \a uint32_t.
///
typedef struct 
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Get.
    /// 
    pfUint32Get get;
    
    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isInReady;
   
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfUint16Set.
    /// 
    pfUint32Set set;
    
    /// \brief Готовность драйвера к приему новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// 
    pfBoolGet isOutReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} Uint32IoDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода для работы с массивами типа \a uint8_t.
///
typedef struct 
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArrayGet.
    /// 
    pfArrayGet get;
    
    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные, готовые для считывания;
    /// \retval false - нет данных, готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} ArrayInDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера вывода для работы с массивами типа \a uint8_t.
///
typedef struct 
{
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    /// 
    pfArraySet set;
    
    /// \brief Готовность драйвера к приему новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// 
    pfBoolGet isReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} ArrayOutDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для работы с массивами типа \a uint8_t.
///
typedef struct 
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArrayGet.
    /// 
    pfArrayGet get;
    
    /// \brief Готовность данных для чтения.
    /// \retval true  - есть данные готовые для считывания;
    /// \retval false - нет данных готовых для считывания.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isInReady;
   
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    /// 
    pfArraySet  set;
    
    /// \brief Готовность драйвера к приему новых данных.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// 
    pfBoolGet isOutReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола, интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid run;
} ArrayIoDriver;

//*****************************************************************************
/// \brief Интерфейс драйвера ввода-вывода для работы с массивами типа \a uint8_t.
///
typedef struct 
{
    /// \brief Чтение данных из драйвера.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArrayGet.
    /// 
    pfArrayGet get;
    
    /// \brief Готовность данных для чтения.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - есть данные готовые для считывания;
    /// \retval false - нет данных готовых для считывания.
    /// 
    pfBoolGet isInReady;
   
    /// \brief Запись данных в драйвер.
    /// \note Входные/выходные параметры драйвера в соответствии с прототипом #pfArraySet.
    /// 
    pfArraySet set;
    
    /// \brief Готовность драйвера к приему новых данных.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfBoolGet.
    /// \retval true  - драйвер готов к записи новых данных;
    /// \retval false - драйвер не готов к записи новых данных.
    /// 
    pfBoolGet isOutReady;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid     run;

    /// \brief Работа драйвера.
    /// \details Данный метод реализует поток управления драйвера и должен вызываться
    /// с частотой, необходимой для успешной обработки данных периферийного 
    /// устройства или протокола интерфейс между которым обеспечивает 
    /// данный драйвер.
    /// \note Входные параметры драйвера в соответствии с прототипом #pfVoid.
    /// 
    pfVoid reset;
} ArrayIoDriverEx;

#endif

//*****************************************************************************
/**
* История изменений:
* 
* Версия 1.0.1
* Автор  Годунок А.Н.
*
* Изменения:
*    Базовая версия.
* 
* Версия 2.0.1
* Дата   27-11-2015
* Автор  Годунок А.Н.
*
* Изменения:
*    В версии 2.0.1 изменен подход к хранению таблицы функций драйвера. 
*    Из требований к безопасности, таблица функций, хранившаяся в структуре
*    данных драйвера, вынесена из этой структуры. 
*    Цель этих изменений: -  сделать возможным хранение таблицы вызовов в ПЗУ.
*    Это необходимо для того, чтобы избежать перехода программы в произвольную
*    область памяти в случае искажения данных в ОЗУ.
*/
