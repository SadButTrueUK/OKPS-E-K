/**
* \file    IOports.h
* \brief   Макросы для работы с портами ввода/вывода.
*
* \version 1.0.2
* \date    15-03-2021
* \author  Агулов М.А.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef IOPORTS_H
#define IOPORTS_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include "typeMK.h"
#include "WorkWithBits.h"

//*****************************************************************************
// Макросы типа функция
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация порта ввода-вывода на вывод.
/// \param reg - имя регистра; 
/// \param numberBit - номер бита в регистре;
/// \param openDrain - если 1, то выход с открытым коллектором.
///
#define INIC_PORT_OUT( reg, numberBit, openDrain )     \
do                                                     \
{                                                      \
    SETBIT_REGISTER( LAT##reg, numberBit, 0 );         \
    SETBIT_REGISTER( TRIS##reg, numberBit, 0 );        \
    SETBIT_REGISTER( ODC##reg, numberBit, openDrain ); \
    CLEARBIT( ANSEL##reg, numberBit );                 \
    SETBIT_REGISTER( CNPU##reg, numberBit, 0 );        \
    SETBIT_REGISTER( CNPD##reg, numberBit, 0 );        \
} while( 0 )

//*****************************************************************************
/// \brief Инициализация порта ввода-вывода на ввод.
/// \param reg - имя регистра;
/// \param numberBit - номер бита в регистре;
/// \param pull      - если 1, то с нагрузочным резистором.
///
#define INIC_PORT_IN( reg, numberBit, pull )                  \
do                                                            \
{                                                             \
    SETBIT_REGISTER( LAT##reg, numberBit, 0 );                \
    SETBIT_REGISTER( TRIS##reg, numberBit, 1 );               \
    SETBIT_REGISTER( ODC##reg, numberBit, eIO_openDrainOff ); \
    CLEARBIT( ANSEL##reg, numberBit );                        \
    SETBIT_REGISTER( CNPU##reg, numberBit, 0 );               \
    SETBIT_REGISTER( CNPD##reg, numberBit, 0 );               \
    if( pull == eIO_pullUp )                                  \
    {                                                         \
        SETBIT_REGISTER( CNPU##reg, numberBit, 1 );           \
    }                                                         \
    else                                                      \
    {                                                         \
        if( pull == eIO_pullDown )                            \
        {                                                     \
            SETBIT_REGISTER( CNPD##reg, numberBit, 1 );       \
        }                                                     \
    }                                                         \
} while( 0 )

//*****************************************************************************
/// \brief Инициализация пина как аналоговый вход.
/// \param [in] port - имя порта (A, B, C ...);
/// \param [in] pin -  номер пина в порту.
///
#define INIC_PIN_ANALOG(port, pin)  (_TRIS##port##pin = _ANS##port##pin = 1)

//*****************************************************************************
// Объявление типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Подключение порта ввода-вывода с открытым стоком.
///

typedef enum 
{
    eIO_openDrainOff    = 0,        ///< выключено
    eIO_openDrainAmount             ///< количество доступных значений
} eIO_openDrain;

//*****************************************************************************
/// \brief Подтяжка входа.
///
typedef enum 
{
    eIO_pullOff  = 0,        ///< выключена
    eIO_pullUp   = 1,        ///< к питанию
    eIO_pullDown = 2         ///< к земле
} eIO_Pull;

#endif

//*****************************************************************************
/**
* Пояснения:
*    Для эффективной работы с битами нужно вводить Уровень Оптимизации 1-4
*          if( CHECKBIT(PORT, 0 )              - 2 команд  МК 
*              SETBIT( PORT, 1 );              - 1 команда МК
*              SETBIT( var, 1 );               - 2 команд  МК
*              SETBIT( var.bp.b0, 1 );         - 1 команда МК
*              if( CHECKBIT( var, 0 ) == 0 )   - 3 команды  МК
*           if( var.bp.b0 == 0 )               - 2 команды  МК
*    при 0 - очень рыхлый код 
*          if( CHECKBIT( PORTD, 0 ) - 5 команд  МК 
*          SETBIT( PORTD, 1 );     - 3 команды МК
*/


//*****************************************************************************
/**
* История изменений: 
*
* Версия 1.0.1
* Дата   14-09-2016
* Автор  Третьяков В.Ж.
*
* Изменения: 
*    Базовая версия.
*
* Версия 1.0.2
* Дата   15-03-2021
* Автор  Агулов М.А.
*
* Изменения:
* 	Добавлен макрос INIC_PIN_ANALOG
*/
