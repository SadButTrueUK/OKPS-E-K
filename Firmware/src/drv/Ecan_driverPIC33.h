/**
* \file    Ecan_driverPIC33.h
* \brief   Драйвер модуля ECAN
* \details Интерфейс
*
* \version 1.0.1
* \date    26-05-2017
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef ECAN_DRIVERPIC33_H
#define ECAN_DRIVERPIC33_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include "iodrv.h"

//*****************************************************************************
// Определение типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Номер модуля \a ECAN, с которым работает драйвер.
///
typedef enum EcanNumber_tag
{
    eEcan1      = 0,    ///< модуль МК \a CAN1
    eEcan2,             ///< модуль МК \a CAN2
    eEcanCount          ///< количество доступных модулей \a CAN2
} EcanNumber;

//*****************************************************************************
/// \brief Режим работы модуля \a CAN.
///
typedef enum EcanMode_tag 
{
    eNormalMode = 0,        ///< нормальный режим работы модуля \a CAN
    eConfigMode = 4         ///< режим настройки модуля \a CAN
} EcanMode;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Конструктор.
/// \note Данный указатель должен передаваться в параметрах всем
/// другим функциям, выполняющим работу данного драйвера.
/// \param numEcan – номер модуля \a ECAN, с которым работает драйвер; 
/// \param txSid – стандартный идентификатор \a CAN для передаваемого пакета;
/// \param rxSid – стандартный идентификатор \a CAN для принимаемого пакета;
/// \param mode - заданный режим работы модуля \a CAN;
/// \param lengthPacket – длина пакета данных (должна быть четной и не более 8).
/// \return Указатель на структуру, описывающую состояние
/// данного драйвера.
///
const void *Ecan_ctor( EcanNumber numEcan,
                       uint16_t txSid, 
                       uint16_t rxSid,
                       uint16_t mode,
                       uint16_t lengthPacket );

//*****************************************************************************
/// \brief Чтение данных из периферийного устройства.
/// \param self - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на массив передаваемых данных;
/// \param size - длина массива.
/// \return Длину принятых данных, которые были помещены в массив \a array.
///
int Ecan_get( const void *self, uint8_t *array, int size );

//*****************************************************************************
/// \brief Готовность устройства к чтению принятых данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \retval true  - устройство готово к считыванию данных;
/// \retval false - устройство не готово к считыванию данных.
///
bool Ecan_isInReady( const void *self );

//*****************************************************************************
/// \brief Передача данных драйверу для вывода.
/// \param self - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на данные, которые необходимо выдать;
/// \param size - размер массива данных.
///
void Ecan_set( const void *self, uint8_t *array, int size );

//*****************************************************************************
/// \brief Рабочий цикл.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void Ecan_run( const void *self );

//*****************************************************************************
/// \brief Сброс операций приема и передачи данных.
/// \details Переводит контроллер \a CAN в режим конфигурации, а потом в режим,
/// заданный при вызове конструктора. 
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void Ecan_reset( const void *self );

//*****************************************************************************
/// \brief Сброс операции передачи данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void Ecan_AbortTransmite( const void *self );

//*****************************************************************************
/// \brief Запустить операцию передачи данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void Ecan_startTransmite( const void *self );

#endif 

//*****************************************************************************
/**
* История изменений: 
*
* Версия 1.0.1
* Дата   26-05-2017
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Базовая версия.
*/
