/**
* \file    Rs422DriverMacros.h
* \brief   Макросы управления RS-422
*
* \version 1.0.2
* \date    22-02-2021
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef RS422DRIVERMACROS_H
#define RS422DRIVERMACROS_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <xc.h>
#include "MainRegisters.h"
#include "IOports.h"

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************

#define BAUDRATE 263314                                 ///< Скорость обмена по интерфейсу RS-422.

//*****************************************************************************
/// \brief Настройка UART: разрешение \a UART (UARTEN = 1), 8 бит данных без паритета, 1 стоп бит.
///
#define INIT_UxMODE 0x8000

//*****************************************************************************
/// \brief Настройка UART: разрешена передача (установлены биты UTXISEL, UTXEN).
///
#define INIT_UxSTA  0x8400

//*****************************************************************************
/// \brief Значения по установке скорости обмена.
///
#define INIT_UxBRG ( ( ( Fcy / BAUDRATE ) / 16 ) - 1 )

//*****************************************************************************
// Макросы типа функция
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация порта управления сигналом DE линии 1.
/// 
#define INIC_PORT_DE_L1 do                 \
{                                          \
    _TRISE0 = 1; \
    _LATE0 = 1; \
    _ANSE0 = 0; \
} while( 0 ) 

//*****************************************************************************
/// \brief Инициализация UART линии 1.
/// 
#define INIC_UART_L1 do    \
{                         \
    U1BRG = INIT_UxBRG;   \
    U1MODE = INIT_UxMODE; \
    U1STA = INIT_UxSTA;   \
} while( 0 ) 

//*****************************************************************************
/// \brief Инициализация UART линии 2.
/// 
#define INIC_UART_L2 do    \
{                         \
    U2BRG = INIT_UxBRG;   \
    U2MODE = INIT_UxMODE; \
    U2STA = INIT_UxSTA;   \
} while( 0 ) 

//*****************************************************************************
/// \brief Инициализация порта управления сигналом DE линии 2.
/// 
#define INIC_PORT_DE_L2 do                 \
{                                          \
    _TRISA4 = 1; \
    _LATA4 = 1;  \
    _ANSA4 = 0;  \
} while( 0 ) 

//*****************************************************************************
/// \brief Установка порта управления сигналом DE линии 1.
/// \param arg - установить в 1 (true), установить в 0 (false).
/// 
#define SET_DE_L1(arg) do      \
{                                   \
    if (arg) _TRISE0 = 0;   \
    else     _TRISE0 = 1;   \
} while( 0 ) 

//*****************************************************************************
/// \brief Установка порта управления сигналом DE линии 2.
/// \param arg - установить в 1 (true), установить в 0 (false).
/// 
#define SET_DE_L2(arg) do      \
{                                   \
    if (arg) _TRISA4 = 0;   \
    else     _TRISA4 = 1;   \
} while( 0 ) 

//*****************************************************************************
/// \brief Сброс переполнения буфера приема UART 1.
/// 
#define L1_UART_CLEAR_OERR do  \
{                             \
    if ( U1STAbits.OERR ) U1STAbits.OERR = 0;       \
} while( 0 ) 

//*****************************************************************************
/// \brief Сброс переполнения буфера приема UART 2.
/// 
#define L2_UART_CLEAR_OERR do  \
{                             \
    if ( U2STAbits.OERR )  U2STAbits.OERR = 0;       \
} while( 0 ) 

//*****************************************************************************
/// \brief Регистр приема UART линии 1.
/// 
#define L1_UART_REG_IN  U1RXREG

//*****************************************************************************
/// \brief Регистр приема UART линии 2.
/// 
#define L2_UART_REG_IN  U2RXREG

//*****************************************************************************
/// \brief Регистр передачи UART линии 1.
/// 
#define L1_UART_REG_OUT  U1TXREG

//*****************************************************************************
/// \brief Регистр передачи UART линии 2.
/// 
#define L2_UART_REG_OUT  U2TXREG

//*****************************************************************************
/// \brief Признак наличия принятых данных в UART линии 1.
/// 
#define L1_UART_IS_DATA_IN  ( U1STAbits.URXDA != 0 )

//*****************************************************************************
/// \brief Признак наличия принятых данных в UART линии 1.
/// 
#define L2_UART_IS_DATA_IN  ( U2STAbits.URXDA != 0 )

//*****************************************************************************
/// \brief Признак наличия места в буфере данных передатчика UART линии 1.
/// 
#define L1_UART_IS_READY_OUT  ( U1STAbits.UTXBF == 0 )

//*****************************************************************************
/// \brief Признак наличия места в буфере данных передатчика UART линии 2.
/// 
#define L2_UART_IS_READY_OUT  ( U2STAbits.UTXBF == 0 )

//*****************************************************************************
/// \brief Признак завершения передачи данных UART линии 1.
/// 
#define L1_UART_IS_END_OUT  ( U1STAbits.TRMT == 1 )

//*****************************************************************************
/// \brief Признак завершения передачи данных UART линии 2.
/// 
#define L2_UART_IS_END_OUT  ( U2STAbits.TRMT == 1 )

#endif

//*****************************************************************************
/**
* История изменений:
* 
* Версия 1.0.1
* Дата   16-05-2018
* Автор  Третьяков В.Ж., Кругликов В.П.
*
* Изменения:
*    Базовая версия для приборов с 2 микросхемами драйверов RS422 
*
* Версия 1.0.2
* Дата   22-02-2021
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Теперь сброс флага переполнения тогда, когда он установлен.
*/
