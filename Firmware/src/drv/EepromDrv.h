/**
* \file    EepromDrv.h
* \brief   Драйвер работы с внешним EEPROM, МК dsPIC33 (подключение - шина I2C)
* \details Интерфейс
*
* \version 1.0.1
* \date    10-05-2016
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef EEPROM_DRV_H
#define EEPROM_DRV_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "Interchannel.h"
#include "I2Cdrv_PIC33.h"

//*****************************************************************************
// Определение типов данных
//*****************************************************************************

//*****************************************************************************
/// \brief Используемые защитные режимы.
///
typedef enum 
{
    eEeProtectionState  = 0,        ///< ЗС
    eEeProtectionWaite,             ///< ЗО
    eEeProtectionAmount             ///< количество используемых режимов
} eEeProtectionModes;

//*****************************************************************************
/// \brief Наличие \a EEPROM. 
///
typedef enum 
{
    eEeNoExist = false,        ///< нет
    eEeExist   = true          ///< есть
} eEeExistence;

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализация переменных.
/// \param self - указатель на структуру данных объекта;
/// \param exist - наличие \a EEPROM;
/// \param numberModule - номер модуля;
/// \param modeProtection - режим ЗС;
/// \param script - процедура МКО данных;
/// \param icId - идентификатор параметра при межканальной синхронизации.
///
void EepromDrv_ctor( const void           *self, 
                     eEeExistence         exist,
                     eI2C_modules         numberModule, 
                     uint8_t              modeProtection, 
                     InterChannelProcSync script,
                     InterChannelId       icId);

//*****************************************************************************
/// \brief Рабочий цикл работы с \a EEPROM.
/// \param self - указатель на структуру данных объекта.
///
void EepromDrv_run( const void *self );

//*****************************************************************************
/// \brief Чтение из \a EEPROM 16-битного значения, одноканальный режим работы.
/// \param self - указатель на структуру данных объекта;
/// \param addressCell – адрес ячейки \a EEPROM.
/// \return Прочитанное значение.
/// 
uint16_t EepromDrv_read( const void *self, uint16_t addressCell );

//*****************************************************************************
/// \brief Запись в \a EEPROM 16-битного значения, одноканальный режим работы.
/// \param self - указатель на структуру данных объекта;
/// \param addressCell – адрес ячейки \a EEPROM;
/// \param data – значение для записи.
///
void EepromDrv_write( const void *self, uint16_t addressCell, uint16_t data );

//*****************************************************************************
/// \brief Начать процедуру записи в \a EEPROM 16-битного значения.
/// \note Завершение записи можно узнать с помощью функции #Eeprom_isReady.
/// \note Попытка записи при незавершенной предыдущей записи приведет к переходу в ЗС (ЗО).
/// \param self - указатель на структуру данных объекта;
/// \param addressCell – адрес ячейки \a EEPROM;
/// \param data – значение для записи.
///
void EepromDrv_setWrite( const void *self, uint16_t addressCell, uint16_t data );

//*****************************************************************************
/// \brief Начать процедуру чтения в \a EEPROM 16-битного значения.
/// \note Завершение чтения можно узнать с помощью функции #Eeprom_isReady.
/// \note Попытка чтения при незавершенном предыдущем чтении приведет к переходу в ЗС.
/// \note Если принятые данные при их синхронизации различаются, то произойдет переход в ЗС (ЗО).
/// \param self - указатель на структуру данных объекта;
/// \param addressCell – адрес ячейки \a EEPROM.
///
void EepromDrv_setRead( const void *self, uint16_t addressCell );

//*****************************************************************************
/// \brief Готовность \a EEPROM к чтению или записи данных, предыдущая операция завершена.
/// \param self - указатель на структуру данных объекта.
/// \retval true  - устройство готово;
/// \retval false - устройство не готово.
///
bool EepromDrv_isReady( const void *self );

//*****************************************************************************
/// \brief Получить данные, считанные из \a EEPROM.
/// \note Попытка чтения при незавершенной предыдущей синхронизации приведет к переходу в ЗС (ЗО).
/// \param self - указатель на структуру данных объекта.
/// \return Данные из \a EEPROM.
///
uint16_t EepromDrv_getData( const void *self );

#endif 

//*****************************************************************************
/**
* Пояснения:
*    Цикл работы в двухканальном режиме:
*    1. Eeprom_write( ) или Eeprom_read( )
*    2. while ( !Eeprom_isReady( ) ); 
*    3. data = EepromDrv_getData( ) для операции чтения
*  
*    В одноканальном режиме используются функции Eeprom_write и Eeprom_read.
*    В штатном режиме использование этих функций запрещено - подвесят систему.
*    В одноканальном режиме работа с отсутствующим EEPROM запрещена.
*    В двухканальном режиме работа с одним отсутствующим EEPROM разрешена.
*    Отсутствующие данные будут взяты из соседнего канала.
*/

//*****************************************************************************
/**
* История изменений: 
*
* Версия 1.0.1
* Дата   10-05-2016
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Базовая версия.
*/
