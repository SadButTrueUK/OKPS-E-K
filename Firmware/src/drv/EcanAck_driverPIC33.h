/**
* \file    EcanAck_driverPIC33.h
* \brief   Драйвер для модуля CAN с подтверждением приема по дискретным линиям
* \details Интерфейс
* \details <b>1 Общие сведения</b>
* \details 1.1  Драйвер EcanAck_driverPIC33 является надстройкой над драйвером 
* Ecan_driverPIC33. Он использует драйвер Ecan_driverPIC33 для передачи и приема
* сообщений по шине \a CAN и дискретные поры ввода/вывода для организации дополнительного
* подтверждения приема по отдельным дискретным линиям.
* \details 1.2  Дополнительное подтверждение приема организовано следующим образом:
* \details – передающий узел перед началом передачи читает состояние дискретного
* порта, запоминает его и начинает передачу сообщения по шине \a CAN;
* \details – принимающий узел после приема корректного сообщения инвертирует 
* состояние дискретного порта;
* \details – передающий узел после окончания передачи и получения подтверждения
* приема по шине \a CAN ожидает изменение состояния дискретного порта на протяжении
* времени #WAITE_TRANSMITE;
* \details – если изменение уровня не происходит, передающий узел повторяет передачу;
* \details – если передающий узел повторил передачу столько раз, сколько задано
* в #REPEAT_TRANSMITE, происходит переход в ЗС с кодом отказа 
* #ePS_CanAckDrvNotAck группы #eGrPS_CanAckDrv.
* \details 1.3  Доступ к функциям драйвера может осуществляться через интерфейс
* типа ArrayIoDriver, который представляет собой таблицу адресов функций:
* get, isInReady, set, isOutReady и run, и описан в модуле iodrv.h.
* \details <b>2	Настройка модуля</b>
* \details 2.1  Для работы модуля в файле EcanAck_Pins.h должны быть определены следующие
* макроопределения:
* \details – #ECAN_ACK_TOGGLE_LEVEL – инвертировать уровень на линии подтверждения приема;
* \details – #ECAN_ACK_CHECK_HIGH – проверка высокого уровня на линии подтверждения приема;
* \details – #ECAN_ACK_INIC_PORTS – инициализация портов ввода-вывода для линий 
* подтверждения приема по дискретным линиям.
* \details 2.2  Для работы с драйвером драйвера через интерфейс типа ArrayIoDriver,
* необходимо объявить константу или переменную этого типа и проинициализировать ее при
* объявлении макроопределения #EcanAck_staticFunc (const ArrayIoDriver mainCanDrvFunc = 
* EcanAck_staticFunc( );). Также проинициализировать эту переменную во время выполнения
* присвоив полям get, isInReady, set, isOutReady и run адреса функций #EcanAck_get, 
* #EcanAck_isInReady, #EcanAck_set, #EcanAck_isOutReady и #EcanAck_run соответственно.
* \details <b>3	Использование модуля</b>
* \details 3.1  Перед использованием модуля его необходимо проинициализировать, вызвав
* функцию #EcanAck_ctor. Этой функции в качестве параметра должно быть передано значение
* типа "void *", которое было получено предварительным вызовом функции #Ecan_ctor из
* модуля Ecan_driverPIC33.
* \details 3.2  Периодически вызывать функцию #EcanAck_run с частотой, обеспечивающей
* своевременный опрос флагов периферийного модуля МК ECAN.
* \details 3.3  Для чтения принятых данных необходимо вызывать функцию #EcanAck_isInReady
* и если она возвращает true, вызвать функцию #EcanAck_get.
* \details 3.4  Для записи данных, которые необходимо передать, необходимо вызывать функцию
* #EcanAck_isOutReady и если она возвращает true, вызывать функцию #EcanAck_set.
* \note Для работы с драйвером драйвера через интерфейс типа ArrayIoDriver, можно
* осуществлять вызов функций через предварительно проинициализированные поля этого типа.
*
* \version 1.0.2
* \date    08-07-2019
* \author  Третьяков В.Ж., Годунок А.Н.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef ECANACK_DRIVERPIC33_H
#define ECANACK_DRIVERPIC33_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include "iodrv.h"

//*****************************************************************************
// Макросы типа функция
//*****************************************************************************

//*****************************************************************************
/// \brief Инициализации таблицы функций драйвера.
/// \details Макроопределение предназначено для статической инициализации
/// полей структуры ArrayIoDriver адресами вызовов функций драйвера. 
/// Например:  const ArrayIoDriver mainCanDrvFunc = * EcanAck_staticFunc( );
///
#define EcanAck_staticFunc( ) \
{                             \
    EcanAck_get,              \
    EcanAck_isInReady,        \
    EcanAck_set,              \
    EcanAck_isOutReady,       \
    EcanAck_run               \
}

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Конструктор.
/// \details Инициализация модуля перед началом работы с ним.
/// \param pDrv – указатель на драйвер \a ECAN, полученный при вызове #Ecan_ctor.
/// \note Данный указатель должен передаваться в параметрах всем
/// другим функциям, выполняющим работу данного драйвера.
/// \return Указатель на структуру, описывающую состояние
/// данного драйвера.
///
const ArrayIoDriver * EcanAck_ctor( const void *pDrv );

//*****************************************************************************
/// \brief Чтение данных из периферийного устройства.
/// \param self - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на массив для данных;
/// \param size - длина массива.
/// \return Длину принятых данных, которые были помещены 
/// в массив \a array.
///
int EcanAck_get( const void *self, uint8_t *array, int size );

//*****************************************************************************    
/// \brief Готовность устройства к чтению принятых данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \retval true  - устройство готово к считыванию данных;
/// \retval false - устройство не готово к считыванию данных.
///
bool EcanAck_isInReady( const void *self );

//*****************************************************************************
/// \brief Передача данных драйверу для вывода.
/// \param self  - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на данные, которые необходимо выдать;
/// \param size  - размер массива данных.
///
void EcanAck_set( const void *self, uint8_t *array, int size );

//*****************************************************************************
/// \brief Готовность устройства к выводу новых данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \retval true  - устройство готово к выводу новых данных;
/// \retval false - устройство не готово к выводу новых данных.
///
bool EcanAck_isOutReady( const void *self );

//*****************************************************************************
/// \brief Рабочий цикл.
/// \details Выполняет опрос флагов периферийного модуля ECAN. 
/// Ее вызов обязателен перед использованием других функций.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void EcanAck_run( const void *self );

#endif 

//*****************************************************************************
/**
* История изменений:
*
* Версия 1.0.1
* Дата   26-05-2017
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Базовая версия.
* 
* Версия  1.0.2
* Дата    08-07-2019
* Автор   Годунок А.Н.
* Изменения:
*     1) Изменен тип данных возвращаемых функцией dsPIC30CanAck_ctor с 
* const void * на const ArrayIoDriver *. 
*/
