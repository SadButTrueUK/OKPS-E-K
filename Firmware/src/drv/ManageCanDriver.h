/**
* \file    ManageCanDriver.h
* \brief   Управление драйвером CAN
* \details Интерфейс
*
* \version 1.0.2
* \date    23-08-2019
* \author  Третьяков В.Ж.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef MANAGECANDRIVER_H
#define MANAGECANDRIVER_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "EcanDriver.h"

//*****************************************************************************
// Прототипы интерфейсных функций
//*****************************************************************************

//*****************************************************************************
/// \brief Конструктор.
/// \param numCan       – номер модуля CAN, с которым работает драйвер; 
/// \param txSid        – стандартный идентификатор CAN для передаваемого пакета;
/// \param rxSid        – стандартный идентификатор CAN для принимаемого пакета;
/// \param mode         - заданный режим работы модуля CAN;
/// \param lengthPacket – длина пакета данных (должна быть четной и не более 8).
/// \return Указатель на структуру, описывающую состояние
/// данного драйвера.
/// \note Данный указатель должен передаваться в параметрах всем
/// другим функциям, выполняющим работу данного драйвера.
///
const ArrayIoDriver *ManageCanDriver_ctor( EcanNumber numCan,
                                   uint16_t txSid,
                                   uint16_t rxSid,
                                   uint16_t mode,
                                   uint16_t lengthPacket );

//*****************************************************************************
/// \brief Чтение данных из периферийного устройства.
/// \param self  - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на массив для данных;
/// \param size  - длина массива.
/// \return Длину принятых данных, которые были помещены 
/// в массив \a array.
///
uint16_t ManageCanDriver_get( const void *self, uint8_t *array, uint16_t size );

//*****************************************************************************
/// \brief Готовность устройства к чтению принятых данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \retval true - устройство готово к считыванию данных;
/// \retval false - устройство не готово к считыванию данных.
///
bool ManageCanDriver_isInReady( const void *self );

//*****************************************************************************
/// \brief Передача данных драйверу для вывода.
/// \param self  - указатель на данные объекта, который вернул конструктор;
/// \param array - указатель на данные, которые необходимо выдать;
/// \param size  - размер массива данных.
///
void ManageCanDriver_set( const void *self, uint8_t *array, uint16_t size );

//*****************************************************************************
/// \brief Готовность устройства к выводу новых данных.
/// \param self - указатель на данные объекта, который вернул конструктор.
/// \retval true - устройство готово к выводу новых данных;
/// \retval false - устройство не готово к выводу новых данных.
///
bool ManageCanDriver_isOutReady( const void *self );

//*****************************************************************************
/// \brief Рабочий цикл.
/// \param self - указатель на данные объекта, который вернул конструктор.
///
void ManageCanDriver_run( const void *self );

//*****************************************************************************
/// \brief Запрос результата операции передачи.
/// \param self - указатель на структуру данных объекта.
/// \return Код завершения последней операции.
///
uint16_t ManageCanDriver_getError( const void *self );

//*****************************************************************************
/// \brief Сброс драйвера.
/// \param self - указатель на структуру данных объекта.
///
void ManageCanDriver_reset( const void *self );

//*****************************************************************************
/// \brief Запуск операции передачи в драйвере.
/// \param self  - указатель на структуру данных объекта;
/// \param array - указатель на массив данных;
/// \param size  - длина массива данных.
///
void ManageCanDriver_start( const void *self, uint8_t *array, uint16_t size );

#endif 

//*****************************************************************************
/**
* История изменений:
*
* Версия 1.0.1
* Дата   25-10-2018
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Базовая версия.
*
* Версия 1.0.2
* Дата   23-08-2019
* Автор  Третьяков В.Ж.
*
* Изменения:
*    Изменен интерфейс конструктора. 
*/
