/**
* \file    MainRegisters.h
* \brief   Настройка битов конфигурации семейства МК dsPIC33.
*
* \version 2.0.2
* \date    15-03-2021
* \author  Агулов М.А.
*/

//*****************************************************************************
// Команды препроцессора для предотвращения повторного включения содержимого файла
//*****************************************************************************
#ifndef MAINREGISTERS_H
#define MAINREGISTERS_H

//*****************************************************************************
// Подключаемые файлы
//*****************************************************************************
#include "typeMK.h"
#include "TimeSynchronizationPorts.h"

//*****************************************************************************
// Глобальные константы, определенные через макросы
//*****************************************************************************

//*****************************************************************************
/// \brief Системная частота процессора.
/// 
#define Fcy                             58982400UL

//*****************************************************************************
/// \brief Период прерывания таймера в Tcy.
/// 
#define MAIN_TIMER_LOAD_PR5           3686

//*****************************************************************************
/// \brief Период прерывания от таймера в единицах нСек.
///
#define TIME_PERIOD_INTERRUPT_NS      62500U 

//*****************************************************************************
/// \brief Имя функции обработки прерывания по изменению уровня входного сигнала.
/// 
#define CN_FUNCTION_INTERRUPT           __attribute__( ( __interrupt__, auto_psv,              \
                                            save( MODCON, DSRPAG, DSWPAG ) ) ) _CNInterrupt

//*****************************************************************************
/// \brief Имя функции обработки прерывания главного таймера.
/// 
#define MAIN_TIMER_FUNCTION_INTERRUPT   __attribute__( ( __interrupt__, auto_psv,               \
                                            save( MODCON, DSRPAG, DSWPAG ) ) ) _T5Interrupt

//*****************************************************************************
/// \brief Имя функции обработки прерывания  таймера для работы с \a CAN.
/// 
#define CAN_TIMER_FUNCTION_INTERRUPT    __attribute__( ( __interrupt__, auto_psv,                 \
                                            save( MODCON, DSRPAG, DSWPAG ) ) ) _T4Interrupt


//*****************************************************************************
#define MAIN_TIMER                      TMR5                 ///< Главный таймер прерываний.
#define MAIN_TIMER_STOP                 T5CONbits.TON = 0    ///< Остановка главного таймера прерываний.
#define MAIN_TIMER_INTERRUPT_CLEAR_FLAG IFS1bits.T5IF = 0    ///< Сброс флага прерываний главного таймера.

//*****************************************************************************
/// \brief Запуск таймера прерываний для работы с \a CAN.
///
#define CAN_TIMER_START \
{                       \
    TMR4 = 0;           \
    T4CONbits.TON = 1;  \
}

//*****************************************************************************
/// \brief Остановка таймера прерываний для работы с \a CAN.
/// 
#define CAN_TIMER_STOP                       T4CONbits.TON = 0

//*****************************************************************************
/// \brief Сброс флага прерываний таймера для работы с \a CAN.
/// 
#define CAN_TIMER_INTERRUPT_CLEAR_FLAG       IFS1bits.T4IF = 0

//*****************************************************************************
/// \brief Запрет прерываний по изменению уровня дискретного входа.
/// 
#define CAN_TIMER_DISABLE_INTERRUPT          ( IEC1bits.T4IE = 0 )

//*****************************************************************************
/// \brief Разрешение прерываний по изменению уровня дискретного входа.
/// 
#define CAN_TIMER_ENABLE_INTERRUPT           ( IEC1bits.T4IE = 1 )

//*****************************************************************************
/// \brief Состояние флага разрешения прерывания таймера для работы с \a CAN.
/// 
#define CAN_TIMER_IS_ENABLE_INTERRUPT        ( IEC1bits.T4IE )

//*****************************************************************************
/// \brief Разрешить/запретить прерывания таймера для работы с \a CAN.
/// 
#define CAN_TIMER_SET_ENABLE_INTERRUPT( en )   ( IEC1bits.T4IE = ( en ) )

//*****************************************************************************
/// \brief Разрешение работы сторожевого таймера.
/// 
#define ENABLE_WATCHDOG                      RCONbits.SWDTEN = 1;

//*****************************************************************************
// Учет времени вызова функции прерывания
// Уровень оптимизации - 1
#define MAIN_TMR_SYNCHRO                     TMR5 = 90     ///< Синхронизация таймера прерываний.

//*****************************************************************************
// Макросы типа функция
//*****************************************************************************

//*****************************************************************************
/// \brief Настройка и запуск главного таймера прерываний.
///
#define MAIN_TIMER_INIT_AND_START                                              \
do                                                                             \
{                                                                              \
    T5CONbits.TON   = 0;         /* Stop any 16-bit Timer operation         */ \
    T5CONbits.TCS   = 0;         /* Select internal instruction cycle clock */ \
    T5CONbits.TGATE = 0;         /* Disable Gated Timer mode                */ \
    T5CONbits.TCKPS = 0b00;      /* Select 1:1 Prescaler                    */ \
    TMR5            = 0x00;      /* Clear 16-bit Timer                      */ \
    PR5 = MAIN_TIMER_LOAD_PR5;   /* Load 16-bit period value                */ \
    T5CONbits.TON   = 1;         /* Start 16-bit Timer                      */ \
} while( 0 )

//*****************************************************************************
/// \brief Настройка и запуск таймера прерываний для работы с \a CAN.
///
#define CAN_TIMER_INIT                                                         \
do                                                                             \
{                                                                              \
    T4CONbits.TON   = 0;         /* Stop any 16-bit Timer operation         */ \
    T4CONbits.TCS   = 0;         /* Select internal instruction cycle clock */ \
    T4CONbits.TGATE = 0;         /* Disable Gated Timer mode                */ \
    T4CONbits.TCKPS = 0b00;      /* Select 1:1 Prescaler                    */ \
    TMR4            = 0x00;      /* Clear 16-bit Timer                      */ \
    PR4             = 128;       /* Load 16-bit period value                */ \
} while( 0 )

//*****************************************************************************
/// \brief Настройка прерываний.
///
#define INTERRUPT_INIT                                                                            \
do                                                                                                \
{                                                                                                 \
    INTCON1bits.NSTDIS = 0;          /* Разрешение вложенности прерываний */                      \
    IPC7bits.T5IP      = 3;          /* Установка приоритета прерываний по таймеру 5 */           \
    IPC4bits.CNIP      = 4;          /* Установка приоритета прерываний по изменению уровня */    \
    IPC6bits.T4IP      = 2;          /* Установка приоритета прерываний по таймеру 6 */           \
    CNENEbits.CNIEE15 = 1;           /* Разрешение прерывания по изменению уровня на входе RE15*/ \
    CN_INTERRUPT_CLEAR_FLAG;         /* Сброс флага прерывания по изменению уровня */             \
    DISABLE_INTERRUPT_CN;            /* Запрет прерывания по изменению уровня уровня */           \
                                     /* Настройка прерываний главного таймера */                  \
    MAIN_TIMER_INTERRUPT_CLEAR_FLAG; /* Сброс флага таймера прерываний главного таймера */        \
    IEC1bits.T5IE      = 1;          /* Разрешение прерываний от главного таймера */              \
                                     /* Настройка прерываний таймера для работы с \a CAN */       \
    CAN_TIMER_INTERRUPT_CLEAR_FLAG;  /* Сброс флага таймера прерываний для работы с \a CAN */     \
    CAN_TIMER_ENABLE_INTERRUPT;      /* Разрешение прерываний от таймера работы с \aCAN */        \
} while( 0 )

//*****************************************************************************
/// \brief Запрет всех прерываний.
///
#define INTERRUPT_ALL_DISABLE                                                      \
do                                                                                 \
{                                                                                  \
    IEC1bits.T5IE      = 0;       /* Запрешение прерываний от главного таймера  */ \
    DISABLE_INTERRUPT_CN;                                                          \
    CAN_TIMER_DISABLE_INTERRUPT;                                                   \
    RCONbits.SWDTEN = 0;                                                           \
} while( 0 )

#endif

//*****************************************************************************
/**
* История изменений:
* 
* Версия 1.0.1
* Дата   12-12-2016
* Автор  Третьяков В.Ж.
* 
* Изменения:
*    Базовая версия.
* 
* Версия 2.0.1
* Дата   25-01-2017
* Автор  Третьяков В.Ж.
* 
* Изменения:
*    Изменение под новую схему на dsPIC33.
* 
* Версия 2.0.2
* Дата   15-03-2021
* Автор  Агулов М.А.
* 
* Изменения:
*   Изменения в связи с настройкой АЦП для работы с DMA
*/
